{
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        120,
        1100
      ],
      "id": "ba264313-c309-4372-afe8-96cf065cf3b4",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a08ebfd2-be88-4870-9f83-9430eda33d56",
              "name": "Resume",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1220,
        1100
      ],
      "id": "b8142087-5077-4254-8037-52508262a7e0",
      "name": "SetResumeField"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1000,
        1100
      ],
      "id": "eda8d9b3-0877-4220-9f66-37ebe850ad1d",
      "name": "Extract Information from Resume PDF"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=You are an expert AI assistant specializing in career matching and job recommendation.\n\n\nYour Goal:\nYour primary task is to analyze a provided dataset of job descriptions from LinkedIn and Indeed, a user's Curriculum Vitae (CV) provided as a string, and the user's job preferences is also provided as a string. Based on this analysis, you must identify and select the top {{ JSON.stringify($('Input').all()[0].json.recommendedJobCount)}}  most suitable job opportunities for the user from the provided list.\n\nInputs You Will Receive:\n\njob_descriptions {{ $json.stringified }}: A collection containing job descriptions scraped from LinkedIn and Indeed. Each job has the following structure:\n{\n  \"id\": [database ID],\n  \"company_name\": [company name],\n  \"job_title\": [job title],\n  \"industry\": [industry],\n  \"application_url\": [URL],\n  \"location\": [job location],\n  \"flexibility\": [work arrangement],\n  \"salary_range\": [salary if available],\n  \"created_at\": [timestamp]\n}\nuser_cv {{ $('SetResumeField').first().json.Resume }}: A single string containing the user's full CV text.\nuser_preferences {{ $('Input').first().json.Preference }}: A single string outlining the user's job preferences (e.g., desired roles, industries, company size, location constraints, salary expectations, work culture).\n\nYour Task Breakdown:\n\nAnalyze: Meticulously parse and understand the content of the user_cv and user_preferences.\nEvaluate: For each of the job_descriptions:\nExtract key information: Company Name, Job Title, Industry (if explicitly mentioned or inferable), and Application URL.\nCompare the job's requirements, responsibilities, and company details against the user's skills, experience (from user_cv), and stated desires (from user_preferences).\nRank: Assess the suitability of each job for the user based on the comparison. Create a ranked list of all scraped jobs from most to least suitable.\nSelect: Choose the top {{ JSON.stringify($('Input').all()[0].json.recommendedJobCount)}} from your ranked list.\nFormat Output: Prepare the final output containing detailed information for only these {{ JSON.stringify($('Input').all()[0].json.recommendedJobCount)}} selected jobs.\n\nOutput Requirements:\n\nYou must return a structured list containing exactly {{ JSON.stringify($('Input').all()[0].json.recommendedJobCount)}} job recommendations. For each of the {{ JSON.stringify($('Input').all()[0].json.recommendedJobCount)}} jobs, provide the following specific details:\n\ndatabase_id: The \"id\" field from the job record.\nCompany Name: The name of the hiring company from \"company_name\".\nJob Title: The official title of the position from \"job_title\".\nIndustry: The industry sector from \"industry\" (if available).\nReason for Match: A brief (1-2 sentences) explanation justifying why this specific job is a strong match for the user. This explanation should explicitly reference alignment between the user's CV/preferences and the job description.\nApplication URL: The direct URL to apply from \"application_url\". If the apply URL is not found or empty, return the linkedin link for this job.\nLocation: The job location from \"location\".\nFlexibility: Work arrangement type from \"flexibility\".\nSalary Range: Salary information from \"salary_range\" if available, otherwise \"Not specified\".\n\nOutput format Example:\n[\n  {\n    \"database_id\": 1,\n    \"Company Name\": \"Innovatech Solutions\",\n    \"Job Title\": \"Senior Software Engineer\",\n    \"Industry\": \"Technology / SaaS\",\n    \"Reason for Match\": \"Strong alignment with your 7 years of backend development experience (Java/Spring) listed in CV and your preference for mid-sized tech companies.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/1234567890\",\n    \"Location\": \"San Francisco, CA\",\n    \"Flexibility\": \"Hybrid\",\n    \"Salary Range\": \"$120,000 - $150,000\"\n  },\n  {\n    \"database_id\": 2,\n    \"Company Name\": \"FinSecure Corp\",\n    \"Job Title\": \"Data Scientist\",\n    \"Industry\": \"Financial Services\",\n    \"Reason for Match\": \"Matches your PhD in Statistics, experience with machine learning models detailed in your CV, and stated interest in the Fintech sector.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/0987654321\",\n    \"Location\": \"New York, NY\",\n    \"Flexibility\": \"On-site\",\n    \"Salary Range\": \"$110,000 - $130,000\"\n  },\n  {\n    \"database_id\": 3,\n    \"Company Name\": \"Global Health Initiative\",\n    \"Job Title\": \"Biostatistician\",\n    \"Industry\": \"Healthcare / Research\",\n    \"Reason for Match\": \"Aligns with your strong statistical background and published research in healthcare outcomes mentioned in your CV.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/5678901234\",\n    \"Location\": \"Boston, MA\",\n    \"Flexibility\": \"Hybrid\",\n    \"Salary Range\": \"Not specified\"\n  },\n  {\n    \"database_id\": 4,\n    \"Company Name\": \"EcoSolutions\",\n    \"Job Title\": \"Sustainability Analyst\",\n    \"Industry\": \"Environmental Services\",\n    \"Reason for Match\": \"Matches your environmental science background and stated preference for working in sustainability-focused organizations.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/2345678901\",\n    \"Location\": \"Portland, OR\",\n    \"Flexibility\": \"Remote\",\n    \"Salary Range\": \"$85,000 - $95,000\"\n  },\n  {\n    \"database_id\": 5,\n    \"Company Name\": \"TechStart Accelerator\",\n    \"Job Title\": \"Technology Consultant\",\n    \"Industry\": \"Consulting\",\n    \"Reason for Match\": \"Aligns with your technical advisory experience and preference for varied project work mentioned in your preferences.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/3456789012\",\n    \"Location\": \"Austin, TX\",\n    \"Flexibility\": \"Hybrid\",\n    \"Salary Range\": \"$100,000 - $120,000\"\n  }, {...} , {...}, ...\n]",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an expert AI data processor. Your sole purpose is to analyze a provided list of job descriptions, compare it against a user's CV and preferences, and return a ranked and filtered list of the most suitable jobs.\n\n\n### CRITICAL RULES:\n1.  **DO NOT INVENT DATA:** You must ONLY use the jobs provided in the `job_descriptions` input. You are strictly forbidden from creating, inventing, or hallucinating job postings, even if you cannot find enough suitable matches.\n2.  **HANDLE EMPTY/UNSUITABLE INPUT:** If you cannot find any suitable jobs in the provided list that match the user's profile, or if the input list is empty, you MUST return an empty JSON array `[]`.\n3.  **RETURN FEWER IF NECESSARY:** If you find fewer suitable jobs than the requested number, you MUST return only the ones you found. Do not add fillers.\n4.  **JSON ONLY:** Your entire response MUST be a single, valid JSON array and nothing else. Do not include any conversational text, explanations, apologies, or markdown formatting like ```json.\n\n\n### Your Task:\nAnalyze the user's CV and preferences. Then, evaluate each job in the `job_descriptions` list. Select the top `recommendedJobCount` most suitable jobs and return them in the specified format.\n\n### Output Requirements:\n-   Return a JSON array of job objects.\n-   Each object must contain: `database_id`, `Company Name`, `Job Title`, `Industry`, `Reason for Match`, `Application URL`, `Location`, `Flexibility`, and `Salary Range`.\n-   The `database_id` and other fields MUST come directly from the original job data you were given.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        4960,
        1080
      ],
      "id": "46087338-488d-4da3-8f17-e30933553de3",
      "name": "AI Agent: Find Best-matched jobs",
      "retryOnFail": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "sendTo": "={{ $('Input').first().json.EmailAddressToReceiveJobRecommendations}}",
        "subject": "=Best-Matched Jobs - {{ $now.format('yyyy-MM-dd') }} ",
        "message": "={{$input.item.json.html}}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        6600,
        1180
      ],
      "id": "a1e2d079-66d2-47bf-be86-b972f1c3468a",
      "name": "Email the top job recommendations",
      "webhookId": "4bad9db8-f115-4943-a6e7-7d319ea117ef",
      "credentials": {
        "gmailOAuth2": {
          "id": "gegIMpsrZsuIjQU7",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro-preview-05-06",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        4960,
        1300
      ],
      "id": "cef80697-b251-46a9-b004-cc33d878902c",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "iK8kH8n2CiqT3aRf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9ba8a38a-17fc-4b4a-8a4e-6981b92cbee4",
              "name": "ApifyAPIKey",
              "value": "={{$env.APIFY_KEY}}",
              "type": "string"
            },
            {
              "id": "a08ebfd2-be88-4870-9f83-9430eda33d56",
              "name": "Preference",
              "value": "={{$env.Job_Matching_Preference}}",
              "type": "string"
            },
            {
              "id": "82b79f4d-43b9-4a36-80df-0d4ca51ab5e5",
              "name": "EmailAddressToReceiveJobRecommendations",
              "value": "={{$env.Email_Adress}}",
              "type": "string"
            },
            {
              "id": "3ee98ee6-7c9f-4f2c-afe7-12bb4d53c7c2",
              "name": "recommendedJobCount",
              "value": 20,
              "type": "number"
            },
            {
              "id": "b4c797c5-da56-47e1-84c1-ce64ea9b508e",
              "name": "first_timeout",
              "value": 20,
              "type": "number"
            },
            {
              "id": "8e16b176-2cd3-448a-a859-6570cacda1f0",
              "name": "request_interval",
              "value": 30,
              "type": "number"
            },
            {
              "id": "957da0f1-203d-455f-9201-471feb1ca244",
              "name": "webhookBaseUrl",
              "value": "={{ $env.WEBHOOK_URL }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        340,
        1100
      ],
      "id": "0deb8e5b-b81f-496a-8dcd-7e286039f03d",
      "name": "Input"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "97e6b24a-a185-4e8e-9767-b0fe88264885",
              "name": "stringified",
              "value": "={{ JSON.stringify($json) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4740,
        1080
      ],
      "id": "d1f0b632-4cfb-4535-937c-3e87b6345580",
      "name": "stringify_json"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6c37a80a-a136-4f79-b8c8-056cd044d5c0",
              "name": "runId",
              "value": "={{ $json.data.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1880,
        440
      ],
      "name": "Extract Run ID",
      "id": "895ce36e-92d5-425c-8c7f-df83c4094e3d"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Extract Run ID').item.json.runId }}?token={{ $('Input').item.json.ApifyAPIKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2320,
        440
      ],
      "name": "Check Run Status",
      "id": "082d8fce-785d-473b-ae28-95092901e50f"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.data.status }}",
              "operation": "equal",
              "value2": "=SUCCEEDED"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2540,
        360
      ],
      "name": "Check if Succeeded",
      "id": "5dde9a49-713a-4c07-a50e-d47bce026982"
    },
    {
      "parameters": {
        "amount": "={{ $('Input').first().json.request_interval }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2760,
        540
      ],
      "name": "Wait and Retry",
      "id": "a76ca6d8-8394-402d-86bc-e96880bffd69",
      "webhookId": "e4e481f0-c4e7-44c8-b8f1-6348cdb8e30c"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Important: Import the datetime module to work with timestamps\nfrom datetime import datetime, timezone\n\n# The incoming data is available in the _data variable.\n# It is expected to be a dictionary from the previous node.\nmatched_jobs = _data.data\n\nprint(\"Attempting to find matched job data...\")\n\nprint(f\"Found: {len(matched_jobs)} matched jobs.\")\n\n# Prepares the data for the database update operation\nupdate_operations = []\nfor job in matched_jobs:\n    \n    job_id = job.get('database_id') or job.get('id')\n    \n    # Only proceed if a job ID is present\n    # if job_id:\n        # Create the data payload for the update\n    update_payload = {\n        'id': job_id,\n        'status': 'processed',\n        'processed_at': datetime.now(timezone.utc).isoformat(),\n    }\n\n    # Add the reason for the match only if it exists\n    reason_for_match = job.get('Reason for Match') # The key from the AI analysis\n    if reason_for_match:\n        # IMPORTANT: 'reason_for_match' must be the exact column name in your database table!\n        update_payload['reason_for_match'] = reason_for_match\n\n    update_operations.append({\n        'json': update_payload\n    })\n\n# The original data is retained for use in the next step of the workflow.\n# It is returned along with the prepared update operations.\nfinal_output = {\n    'matchedJobs': matched_jobs,\n    'updateOperations': update_operations\n}\n\n# Returns the data in the correct n8n format.\n# The node outputs a list of items, in this case, just one item.\nreturn [final_output]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6160,
        1080
      ],
      "id": "2fe0b5e4-8622-4636-aa9b-3fe2417ac8e5",
      "name": "update_job_status",
      "alwaysOutputData": false,
      "notesInFlow": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6c37a80a-a136-4f79-b8c8-056cd044d5c0",
              "name": "runId",
              "value": "={{ $json.data.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1880,
        1340
      ],
      "name": "Extract Run ID1",
      "id": "b97dd93c-2d9e-40bd-89e5-7c4d69dbca01"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Extract Run ID1').item.json.runId }}?token={{ $('Input').first().json.ApifyAPIKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2320,
        1340
      ],
      "name": "Check Run Status1",
      "id": "fbc17869-60e6-4e12-9902-4cdd3f1f3b8d"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.data.status }}",
              "operation": "equal",
              "value2": "=SUCCEEDED"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2540,
        1260
      ],
      "name": "Check if Succeeded1",
      "id": "6b44b5e5-e7bb-458c-b8d8-a20bf5e4ff0d"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Extract Run ID1').item.json.runId }}/dataset/items?token={{ $('Input').first().json.ApifyAPIKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2760,
        1200
      ],
      "name": "Get Dataset Items1",
      "id": "b737bfcf-57da-47ee-897d-5cbe7ad6ff29"
    },
    {
      "parameters": {
        "amount": "={{ $('Input').first().json.request_interval }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2760,
        1440
      ],
      "name": "Wait and Retry1",
      "id": "ce9afdd7-3d85-44d1-9b7c-16a9e8c0c8ae",
      "webhookId": "abb7cef4-3e55-4ccc-a3b0-e53c80156cd2"
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        3200,
        960
      ],
      "id": "942a3cc7-88be-40cb-b40e-32bf40bf0da6",
      "name": "Merge"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/acts/valig~linkedin-jobs-scraper/runs?token={{ $('Input').item.json.ApifyAPIKey }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {}
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"datePosted\": \"r604800\",\n    \"experienceLevel\": [\n        \"2\",\n        \"3\"\n    ],\n    \"location\": \"Munich\",\n    \"remote\": [\n        \"1\",\n        \"2\",\n        \"3\"\n    ],\n    \"title\": \"Data Scientist\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1660,
        440
      ],
      "name": "start_apify_run_linkedin",
      "id": "46c07d48-62b9-4544-b584-d5e356aa73e2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/acts/valig~indeed-jobs-scraper/runs?token={{ $('Input').item.json.ApifyAPIKey }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"country\": \"de\",\n    \"datePosted\": \"1\",\n    \"limit\": 50,\n    \"location\": \"München\",\n    \"title\": \"Mathematik\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1660,
        1340
      ],
      "name": "start_apify_run_indeed",
      "id": "2ccd68f3-9c0b-4e66-8cfc-35418444860c"
    },
    {
      "parameters": {
        "jsCode": "// 获取要更新的操作\nconst updateOps = $input.first().json.updateOperations;\n\n// 将每个更新操作拆分为单独的项\nreturn updateOps.map(op => op.json);"
      },
      "id": "cc430bef-52e7-4b16-8d71-9ae533cd4436",
      "name": "extract_update_operation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6380,
        980
      ]
    },
    {
      "parameters": {
        "content": "### Setup Scraping Jobs\nFor more information on configuring the input JSON for the scraper actors, please refer to the [apiy actor sites](https://console.apify.com/actors/TrtlecxAsNRbKl1na/input).",
        "height": 1680,
        "width": 220,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1600,
        260
      ],
      "id": "b513a91b-5ec9-45c6-a56d-8148d3f1743d",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6c37a80a-a136-4f79-b8c8-056cd044d5c0",
              "name": "runId",
              "value": "={{ $json.data.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1880,
        1780
      ],
      "name": "Extract Run ID2",
      "id": "0c7e400b-5b0c-4f1a-ae45-f82b83946162"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Extract Run ID2').item.json.runId }}?token={{ $('Input').first().json.ApifyAPIKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2320,
        1780
      ],
      "name": "Check Run Status2",
      "id": "f1fc9769-8338-403f-b30f-4219db934691"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.data.status }}",
              "operation": "equal",
              "value2": "=SUCCEEDED"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2540,
        1700
      ],
      "name": "Check if Succeeded2",
      "id": "009ee3d6-ebb7-4b6b-874c-7a00cb9a4ba6"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Extract Run ID2').item.json.runId }}/dataset/items?token={{ $('Input').first().json.ApifyAPIKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2760,
        1660
      ],
      "name": "Get Dataset Items2",
      "id": "a5b4c023-3a00-46c6-80ad-56aeeffcecb1"
    },
    {
      "parameters": {
        "amount": "={{ $('Input').first().json.request_interval }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2760,
        1880
      ],
      "name": "Wait and Retry2",
      "id": "0411be33-987f-4118-9f39-3802027730d8",
      "webhookId": "ded8ac5b-231b-457d-80be-d659f5d880e8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/acts/valig~indeed-jobs-scraper/runs?token={{ $('Input').item.json.ApifyAPIKey }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"country\": \"de\",\n    \"datePosted\": \"1\",\n    \"limit\": 50,\n    \"location\": \"München\",\n    \"title\": \"Data Science\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1660,
        1780
      ],
      "name": "start_apify_run_indeed1",
      "id": "242ac01f-51c0-46a3-9153-919914cea8ee"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Helper function to normalize dictionary keys\ndef normalize_keys(data_dict):\n    \"\"\"\n    Takes a dictionary and returns a new dictionary with its keys\n    normalized (lowercase, no spaces, no underscores).\n    \"\"\"\n    normalized_dict = {}\n\n    for key, value in data_dict.items():\n        # 1. Convert to string, 2. Lowercase, 3. Remove space, 4. Remove underscore\n        normalized_key = str(key).lower().replace(' ', '').replace('_', '')\n        normalized_dict[normalized_key] = value\n    return normalized_dict\n\n# --- Main Execution Block ---\n\n# Get the data from the previous node\n# Assuming the AI agent's output is the direct input to this node\ninput_data = _data\njobs = input_data.matchedJobs\n# norm_jobs = [normalize_keys(job) for job in jobs]\n# return norm_jobs\njob_listings_html = []\n# Create an HTML block for each job\nfor job in jobs:\n    # Normalize the keys of the current job object\n    norm_job = normalize_keys(job)\n    \n    # Now, we can access the data with consistent, clean keys\n    webhook_base_url = _('Input').first().json.webhookBaseUrl\n  \n    company_name = norm_job.get('companyname')\n    job_title = norm_job.get('jobtitle', 'N/A')\n    industry = norm_job.get('industry', 'N/A')\n    flexibility = norm_job.get('flexibility', 'N/A')\n    salary_range = norm_job.get('salaryrange', 'N/A')\n    location = norm_job.get('location', 'N/A')\n    reason_for_match = norm_job.get('reasonformatch', 'N/A')\n    application_url = norm_job.get('applicationurl', '#')\n    database_id = norm_job.get('databaseid', '')\n\n    html_block = f\"\"\"\n    <tr>\n        <td style=\"padding: 0 25px;\">\n            <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"border: 1px solid #dce3ea; border-radius: 10px; margin-bottom: 25px; overflow: hidden;\">\n                <tr>\n                    <td style=\"background-color: #4a6fa5; color: #ffffff; padding: 18px 20px;\">\n                        <strong style=\"font-size: 18px;\">{company_name}</strong><br>\n                        <span style=\"font-size: 14px; opacity: 0.9;\">{job_title}</span>\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"padding: 20px; background-color: #ffffff;\">\n                        <div style=\"display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 14px;\">\n                            <div style=\"background-color: #eef2f7; color: #4a6fa5; border-radius: 20px; padding: 8px 14px; font-size: 13px; display: inline-block;\">{industry}</div>\n                            <div style=\"background-color: #f0f7f4; color: #00a06a; border-radius: 20px; padding: 8px 14px; font-size: 13px; display: inline-block;\">{flexibility}</div>\n                            <div style=\"background-color: #f7f4f0; color: #a06a00; border-radius: 20px; padding: 8px 14px; font-size: 13px; display: inline-block;\">{salary_range}</div>\n                        </div>\n                        <div style=\"margin-bottom: 12px; background-color: #fafafa; padding: 12px; border-radius: 6px;\">\n                            <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n                                <tr>\n                                    <td style=\"padding-bottom: 8px;\">\n                                        <span style=\"font-size: 13px; color: #666666;\">📍 Location:</span>\n                                        <span style=\"font-size: 13px; color: #333333; font-weight: bold; margin-left: 4px;\">{location}</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                        <div style=\"margin-bottom: 18px; border-left: 4px solid #4a6fa5; padding-left: 14px; background-color: #f9f9f9; padding-top: 10px; padding-bottom: 10px;\">\n                            <strong style=\"color: #2a5298; font-size: 15px;\">Why this matches your profile:</strong>\n                            <p style=\"font-size: 13px; color: #444444; margin: 10px 0 0;\">{reason_for_match}</p>\n                        </div>\n                        <a href=\"{application_url}\" target=\"_blank\" style=\"display: inline-block; background-color: #00c07f; color: #ffffff; text-decoration: none; padding: 12px 24px; font-size: 14px; font-weight: bold; border-radius: 6px;\">Apply Now</a>\n                        <div style=\"display: flex; margin-top: 15px;\">\n                            <a href=\"{webhook_base_url}/webhook/2f32a889-c6d8-4dda-a550-71d963063aa7?jobId={database_id}\" target=\"_blank\" style=\"display: inline-block; background-color: #4a6fa5; color: #ffffff; text-decoration: none; padding: 8px 16px; font-size: 12px; border-radius: 4px;\">Generate Cover Letter</a>\n                        </div>\n                    </td>\n                </tr>\n            </table>\n        </td>\n    </tr>\n    \"\"\"\n    job_listings_html.append(html_block)\n\n# Parse the job list into the main template\nfull_html = f\"\"\"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Tailored Career Opportunities</title>\n</head>\n<body style=\"font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; line-height: 1.6; color: #333333; background-color: #f5f7fa; margin: 0; padding: 0;\">\n    <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n            <td align=\"center\" style=\"padding: 30px 15px;\">\n                <table width=\"600\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"background-color: #ffffff; border-collapse: collapse; box-shadow: 0 0 12px rgba(0,0,0,0.05); border-radius: 8px; overflow: hidden;\">\n                    <tr>\n                        <td style=\"background-color: #2a5298; color: #ffffff; padding: 40px 30px; text-align: center;\">\n                            <h1 style=\"margin: 0; font-size: 24px; font-weight: bold;\">Your Personalized Career Opportunities</h1>\n                            <p style=\"margin: 15px 0 0; font-size: 15px; opacity: 0.9;\">Handpicked opportunities aligned with your expertise and preferences</p>\n                        </td>\n                    </tr>\n                    <tr><td height=\"30\"></td></tr>\n                    {''.join(job_listings_html)}\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</html>\"\"\"\n\nreturn [{'json': {'html': full_html}}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6380,
        1180
      ],
      "id": "64988cd2-274f-42a7-b6a3-8204f7596585",
      "name": "generate_html_template_py"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM job_listings WHERE id IN (SELECT * FROM json_array_elements_text($1::json))",
        "options": {
          "queryReplacement": "={{ $json.data.map(item => item.id) }}\n"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3640,
        980
      ],
      "id": "7e68be85-a8d8-43c7-aca4-b2d342ce7775",
      "name": "Get Existing Jobs from DB",
      "alwaysOutputData": true,
      "executeOnce": false,
      "credentials": {
        "postgres": {
          "id": "KBXZvBBfjIrNeuKP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": " new_jobs_to_insert",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        4080,
        1080
      ],
      "id": "497c3648-9e7e-4a5d-a61f-a066ae1f00bc",
      "name": "Split Out",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "updates_to_execute",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        4080,
        880
      ],
      "id": "9d0bf5d9-d77c-4d32-b962-c0c6e60fec7f",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "functionCode": "var date = new Date().toISOString();\nvar day = new Date().getDay();\nconst weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\nitems[0].json.date_today = date;\nitems[0].json.day_today = weekday[day];\n\nreturn items;"
      },
      "name": "GetDate",
      "type": "n8n-nodes-base.function",
      "position": [
        1680,
        2400
      ],
      "typeVersion": 1,
      "id": "d74f8c22-b87e-488f-827e-e54eefc95c66"
    },
    {
      "parameters": {
        "path": "2f32a889-c6d8-4dda-a550-71d963063aa7",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1020,
        2400
      ],
      "id": "53391278-d20c-4f6f-9e84-c211e6ce5dfa",
      "name": "Webhook1",
      "webhookId": "4525e7c3-900a-46ba-936b-b99a83c6aa6e"
    },
    {
      "parameters": {
        "mode": "markdownToHtml",
        "markdown": "={{ $('Cover Letter Agent').item.json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        4860,
        2600
      ],
      "id": "68c50d9d-1b74-4563-9ecf-251653218bf1",
      "name": "Markdown1"
    },
    {
      "parameters": {
        "jsCode": "// 获取AI Agent的输出文本\nconst fullText = $('set_cover_letter1').first().json.output;\n\n// 按自然段落分割文本\nconst paragraphs = fullText.split(\"\\n\\n\");\n\n// 提取第一段作为标题（可选）\nconst title = paragraphs[0].trim();\n\n// 创建块内容\nconst blocks = [];\n\nparagraphs.forEach((paragraph, index) => {\n  if (paragraph.trim().length > 0) {\n    // 确保段落不超过2000字符\n    if (paragraph.length > 2000) {\n      // 如果超过，进一步分割\n      let startIdx = 0;\n      while (startIdx < paragraph.length) {\n        const chunk = paragraph.substring(startIdx, Math.min(startIdx + 1900, paragraph.length));\n        blocks.push({\n          \"type\": \"paragraph\",\n          \"paragraph\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": chunk\n              }\n            }]\n          }\n        });\n        startIdx += 1900;\n      }\n    } else {\n      // 如果段落长度合适，直接添加\n      blocks.push({\n        \"type\": \"paragraph\",\n        \"paragraph\": {\n          \"rich_text\": [{\n            \"type\": \"text\",\n            \"text\": {\n              \"content\": paragraph\n            }\n          }]\n        }\n      });\n    }\n  }\n});\n\n// 返回结果，包含标题和块\nreturn {\n  json: {\n    title: title,\n    blocks: blocks\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4580,
        2600
      ],
      "id": "e2834198-a584-4fec-ab26-5fce314e77b4",
      "name": "parse_to_markdown1"
    },
    {
      "parameters": {
        "jsCode": "// 获取AI Agent的输出文本\nconst fullText = $('set_cover_letter1').first().json.output;\n\n// 按自然段落分割文本\nconst paragraphs = fullText.split(\"\\n\\n\");\n\n// 创建多个输出项，每项对应一个Notion段落\nconst returnItems = [];\n\nparagraphs.forEach((paragraph, index) => {\n  if (paragraph.trim().length > 0) {\n    // 确保段落不超过2000字符\n    if (paragraph.length > 2000) {\n      // 如果超过，进一步分割\n      let startIdx = 0;\n      while (startIdx < paragraph.length) {\n        const chunk = paragraph.substring(startIdx, Math.min(startIdx + 1900, paragraph.length));\n        returnItems.push({\n          json: {\n            index: returnItems.length,\n            content: chunk,\n            type: \"paragraph\"\n          }\n        });\n        startIdx += 1900;\n      }\n    } else {\n      // 如果段落长度合适，直接添加\n      returnItems.push({\n        json: {\n          index: index,\n          content: paragraph,\n          type: \"paragraph\"\n        }\n      });\n    }\n  }\n});\n\nreturn returnItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5160,
        2600
      ],
      "id": "0b6dc164-5760-41cd-8de4-51d254c0908b",
      "name": "parse_to_paragraphs1"
    },
    {
      "parameters": {
        "jsCode": "return $('parse_to_paragraphs1').all().map(item => ({\n  json: {\n    content: item.json.content,\n    type: item.json.type,\n    index: item.json.index\n  }\n}))"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5600,
        2600
      ],
      "id": "be29b119-674c-40f4-98c0-9f5995b691cf",
      "name": "return_all_items1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7385ee1c-5a5e-4576-b311-c6fd3f678a8b",
              "name": "property_company_name",
              "value": "={{ $json.property_company_name }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2120,
        2400
      ],
      "id": "7a246372-e1f1-444b-80e5-0f7cd421ae96",
      "name": "set_company_name2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12c45e38-79d5-49d1-92ed-8e1aee3081b6",
              "name": "output",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4280,
        2600
      ],
      "id": "8aebbd2c-d3cc-4f53-adc7-c94faf6d157f",
      "name": "set_cover_letter1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8e16b176-2cd3-448a-a859-6570cacda1f0",
              "name": "EmailAddressToReceiveCoverLetter",
              "value": "={{$env.Email_Adress}}",
              "type": "string"
            },
            {
              "id": "ce46df61-7da9-4f55-9997-3b43906a59e0",
              "name": "PersonalizationNotes",
              "value": "={{$env.Personalization_Notes}}",
              "type": "string"
            },
            {
              "id": "f348b123-cd1b-4698-b68d-889b245935d2",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1460,
        2400
      ],
      "id": "ae757420-f2d0-4107-8efb-19eebdba3e58",
      "name": "Input2"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/data/{{ $('Prepare Latex').item.json.tex_filename }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        5600,
        2260
      ],
      "id": "1e9528fb-b51c-4e50-890e-76451f862d7c",
      "name": "Read/Write Files from Disk7"
    },
    {
      "parameters": {
        "jsCode": "// 从Webhook调用中提取jobId参数\nconst jobId = $('Webhook1').first().json?.query?.jobId;\n\nif (!jobId) {\n  return {\n    json: {\n      success: false,\n      message: \"Missing job ID parameter. Please provide a jobId query parameter.\"\n    }\n  };\n}\n\nreturn {\n  json: {\n    success: true,\n    jobId: jobId\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        2400
      ],
      "id": "dc34c174-f6b3-4ff4-999c-6ee4b5bdc272",
      "name": "get_job_id1"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "1RWvsyre4BnUlMiIVA2Br-pMlOdOkVYGr",
          "mode": "list",
          "cachedResultName": "Master CV July25.pdf",
          "cachedResultUrl": "https://drive.google.com/file/d/1RWvsyre4BnUlMiIVA2Br-pMlOdOkVYGr/view?usp=drivesdk"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        2780,
        2400
      ],
      "id": "8e9500a3-af5a-46d7-b179-95665a1142b5",
      "name": "Download Master CV1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "CALK5gKuDX6azjm1",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "cleaned_content",
        "options": {
          "fileName": "={{ $json.tex_filename }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        5380,
        2260
      ],
      "id": "c04ac272-e488-4bd3-ab40-2af4b464a312",
      "name": "Convert to File4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1440,
        1100
      ],
      "id": "faac6a73-6d65-442c-b088-fa4f14121273",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "job_listings",
          "mode": "list",
          "cachedResultName": "job_listings"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.new_jobs_to_insert.id }}",
            "company_name": "={{ $json.new_jobs_to_insert.company_name }}",
            "job_title": "={{ $json.new_jobs_to_insert.job_title }}",
            "application_url": "={{ $json.new_jobs_to_insert.application_url }}",
            "location": "={{ $json.new_jobs_to_insert.location }}",
            "description": "={{ $json.new_jobs_to_insert.description }}",
            "industry": "={{ $json.new_jobs_to_insert.industry }}",
            "flexibility": "={{ $json.new_jobs_to_insert.flexibility }}",
            "salary_range": "={{ $json.new_jobs_to_insert.salary_range }}",
            "status": "={{ $json.new_jobs_to_insert.status }}",
            "source": "={{ $json.new_jobs_to_insert.source }}",
            "created_at": "={{ $json.new_jobs_to_insert.created_at }}",
            "occurrence_count": 0
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "company_name",
              "displayName": "company_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "job_title",
              "displayName": "job_title",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "application_url",
              "displayName": "application_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "location",
              "displayName": "location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "description",
              "displayName": "description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "industry",
              "displayName": "industry",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "flexibility",
              "displayName": "flexibility",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "salary_range",
              "displayName": "salary_range",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "source",
              "displayName": "source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "processed_at",
              "displayName": "processed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "reason_for_match",
              "displayName": "reason_for_match",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "occurrence_count",
              "displayName": "occurrence_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "first_scraped_at",
              "displayName": "first_scraped_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "last_scraped_at",
              "displayName": "last_scraped_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4300,
        1080
      ],
      "id": "648ba9e1-10f5-4f38-99cb-801fcdf7a551",
      "name": "Insert new job postings",
      "credentials": {
        "postgres": {
          "id": "KBXZvBBfjIrNeuKP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.updates_to_execute.json.query }}",
        "options": {
          "queryReplacement": "={{ $json.updates_to_execute.json.params }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4300,
        880
      ],
      "id": "02908857-e56c-48f2-b905-4a893b312f9f",
      "name": "Update existing job postings",
      "credentials": {
        "postgres": {
          "id": "KBXZvBBfjIrNeuKP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        4520,
        1080
      ],
      "id": "f1ab0451-6cdd-4d09-984e-f42bcb29f849",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "job_listings",
          "mode": "list",
          "cachedResultName": "job_listings"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}",
            "status": "={{ $json.status }}",
            "processed_at": "={{ $json.processed_at }}",
            "reason_for_match": "={{ $json.reason_for_match }}",
            "occurrence_count": 0
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "company_name",
              "displayName": "company_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "job_title",
              "displayName": "job_title",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "application_url",
              "displayName": "application_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "location",
              "displayName": "location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "description",
              "displayName": "description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "industry",
              "displayName": "industry",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "flexibility",
              "displayName": "flexibility",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "salary_range",
              "displayName": "salary_range",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "source",
              "displayName": "source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "processed_at",
              "displayName": "processed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "reason_for_match",
              "displayName": "reason_for_match",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "occurrence_count",
              "displayName": "occurrence_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "first_scraped_at",
              "displayName": "first_scraped_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "last_scraped_at",
              "displayName": "last_scraped_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "change_history",
              "displayName": "change_history",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        6600,
        980
      ],
      "id": "0c484506-25cf-4669-8a15-6554a8a3ac6f",
      "name": "Postgres3",
      "credentials": {
        "postgres": {
          "id": "KBXZvBBfjIrNeuKP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        3420,
        980
      ],
      "id": "8f26bb01-d5d2-499f-a745-a3f175b5807e",
      "name": "Scraped_Aggregated"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "job_listings",
          "mode": "list",
          "cachedResultName": "job_listings"
        },
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.jobId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1900,
        2400
      ],
      "id": "fde5ee81-accf-4791-876f-bf5e5e3af709",
      "name": "Get Job Posting",
      "credentials": {
        "postgres": {
          "id": "KBXZvBBfjIrNeuKP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "haow.guan@gmail.com",
        "subject": "=  {{ $('Merge1').last().json.subject}}",
        "message": "=  {{ $('Merge1').last().json.body}}",
        "options": {
          "attachmentsUi": {
            "attachmentsBinary": [
              {
                "property": "=pdfdata"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        6480,
        2400
      ],
      "id": "6973f990-eb72-4dfb-b0ef-f088b7c594ac",
      "name": "Gmail",
      "webhookId": "dd01c4f5-206b-4065-944c-f63e4b05002c",
      "executeOnce": true,
      "credentials": {
        "gmailOAuth2": {
          "id": "gegIMpsrZsuIjQU7",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Task: Populate the LaTeX Template\n\nTake the following JSON object of resume content and insert it into the provided LaTeX template.\n\n---\n## 1. Resume Content JSON\n{{ JSON.stringify($('Parse Resume JSON').item.json) }}\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an expert LaTeX developer functioning as a \"template engine.\" Your sole purpose is to take a JSON object of pre-written content and a LaTeX template, and perfectly populate the template with that content.\n\n- You MUST NOT change the content provided in the JSON.\n- You MUST correctly escape any special LaTeX characters (like %, &, $, #, _) found in the content.\n- You MUST NOT alter the structure, preamble, or custom commands of the LaTeX template.\n\nYour entire output must be a single block of raw LaTeX code, starting with \\documentclass and ending with \\end{document}. Do not include any other text or markdown.\n\nContext: The LaTeX Template (agent_template.tex)\nThis is the only structure you are allowed to use. Your output must be a populated version of this exact template code.\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% PlushCV - Sanitized Template for AI Agent\n%\n% This template is based on the user's provided script. It assumes that all\n% necessary packages (like textpos, tcolorbox) and custom environments\n% (like colorstrip) are defined in the plushcv.cls file.\n%\n% IMPORTANT: THIS TEMPLATE NEEDS TO BE COMPILED WITH XeLaTeX\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n\\documentclass[]{plushcv} % Assumes plushcv.cls is in the same directory\n\n\\newcommand{\\imagewidth}{0.25\\paperwidth} % Define the width of your image\n\n\\begin{document}\n% \\lastupdated % Optional command, commented out.\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%   HEADER SECTION & PROFILE PICTURE\n%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\noindent % Important to prevent paragraph indentation before minipages\n\\begin{minipage}[t]{0.8\\linewidth} % Minipage for the name/contact info\n    \\vspace{0pt} % Ensures content aligns at the very top.\n\n    % Agent populates these fields from Master CV's personal_info.\n    \\namesection{Firstname}{Lastname}{Your Professional Title}{%\n        \\contactline%\n            {City, Country}%\n            {\\href{[https://github.com/username](https://github.com/username)}{[github.com/username](https://github.com/username)}}%\n            {\\href{[https://www.linkedin.com/in/profile](https://www.linkedin.com/in/profile)}{[linkedin.com/in/profile](https://linkedin.com/in/profile)}}%\n            {\\href{mailto:email@provider.com}{email@provider.com}}%\n            {\\href{tel:+1234567890}{+12 345 67890}}%\n    }\n\n\\end{minipage}\\hfill%\n\n% Profile picture positioned with textpos\n\\begin{textblock*}{\\imagewidth}(0.67\\paperwidth, 0pt)\n    % Agent should replace this with the actual image file path.\n    \\includegraphics[width=\\imagewidth]{placeholder_avatar.png}\n\\end{textblock*}\n\n\\par % End the horizontal layout of the header\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%   SUMMARY\n%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\sectionsep\n\\begin{center}\n\\begin{colorstrip}{gray!20}\n\\begin{minipage}{\\textwidth}\n    { % Local group for font changes\n    \\fontspec[Path = \\pathtitlefont, SizeFeatures={Size=10pt}]{\\secondnamefont}\n    \\renewcommand{\\bfseries}{\\fontspec[Path = \\pathtitlefont, SizeFeatures={Size=10pt}]{\\firstnamefont}}\n\n    % Agent generates a 3-4 line summary here, tailored to the job description.\n    \n    } % End the local group\n\\end{minipage}\n\\end{colorstrip}\n\\end{center}\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%   EXPERIENCE\n%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\section{Experience}\n\n% Agent loops through selected job experiences and generates blocks like this for each.\n\\runsubsection{Company Name}\n\\descript{Job Title}\n\\location{Start Month Year -- End Month Year | City, Country}\n\\begin{tightemize}\n% Agent generates tailored bullet points here\n\\end{tightemize}\n\\sectionsep\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%   EDUCATION\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\section{Education}\n\n% Agent generates blocks for each educational entry.\n\\runsubsection{University Name}\n\\descript{Degree Name}\n\\location{Start Year -- End Year | City, Country}\n\\vspace{0.2em}\n\\fontspec[Path = \\pathmainfont]{\\mainfont}[Color=primary, SizeFeatures={Size=\\mainfontsize}]\n% Agent adds thesis/coursework details here.\n\\sectionsep\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%   PROJECTS\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\section{Projects}\n\n% Agent loops through selected, tailored projects.\n\\runsubsection{Project Name}\n\\location{Technology Stack}\n\\begin{tightemize}\n% Agent generates tailored bullet points here\n\\end{tightemize}\n\\sectionsep\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%   SKILLS\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\section{Skills}\n\n% Agent selects and categorizes skills based on the job description.\n\\subsection{Category Name}\n\\sectionsep\n\\fontspec[Path = \\pathmainfont]{\\mainfont}[Color=primary, SizeFeatures={Size=\\mainfontsize}]\n% Agent lists skills here, separated by \\textbullet{}\n\\sectionsep\n\n\\end{document}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        4800,
        2160
      ],
      "id": "e29d327c-ab37-4322-8fda-8cd04c773b4b",
      "name": "AI Resume Consultant"
    },
    {
      "parameters": {
        "jsCode": "const raw_latex_content = $input.first().json.output;\nlet cleaned_content = raw_latex_content.trim();\nif (cleaned_content.startsWith(\"```latex\")) {\n  cleaned_content = cleaned_content.substring(\"```latex\".length).trimStart();\n}\nif (cleaned_content.endsWith(\"```\")) {\n  cleaned_content = cleaned_content.slice(0, -\"```\".length).trimEnd();\n}\nconst company_name = $('Get Job Posting').item.json.company_name.replace(/[^a-zA-Z0-9]/g, '_');\nconst timestamp = new Date().toISOString().replace(/[:.]/g, '-');\nconst tex_filename = `cover_letter_${company_name}_${timestamp}.tex`;\nreturn {\n  tex_filename: tex_filename,\n  pdf_filename: tex_filename.replace('.tex', '.pdf'),\n  cleaned_content: cleaned_content\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5160,
        2260
      ],
      "id": "e9c9fac2-1e53-42cf-af8f-414af9fb8d8f",
      "name": "Prepare Latex"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6c37a80a-a136-4f79-b8c8-056cd044d5c0",
              "name": "runId",
              "value": "={{ $json.data.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1880,
        880
      ],
      "name": "Extract Run ID3",
      "id": "0a027523-9d52-43ad-819b-aac8adace8bd"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Extract Run ID3').item.json.runId }}?token={{ $('Input').item.json.ApifyAPIKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2320,
        880
      ],
      "name": "Check Run Status3",
      "id": "a75e241e-30f1-46aa-ac8a-c2094d8c2fa5"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.data.status }}",
              "operation": "equal",
              "value2": "=SUCCEEDED"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2540,
        800
      ],
      "name": "Check if Succeeded3",
      "id": "dabce1b6-bff9-4aa4-a5ad-b7c4caa16b0f"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Extract Run ID3').item.json.runId }}/dataset/items?token={{ $('Input').item.json.ApifyAPIKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2760,
        760
      ],
      "name": "Get Dataset Items3",
      "id": "f2498b21-8e29-44fb-8e6b-a01996167330"
    },
    {
      "parameters": {
        "amount": "={{ $('Input').first().json.request_interval }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2760,
        980
      ],
      "name": "Wait and Retry3",
      "id": "cb41a522-4432-4830-9582-e2093e6546a4",
      "webhookId": "e4e481f0-c4e7-44c8-b8f1-6348cdb8e30c"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/acts/valig~linkedin-jobs-scraper/runs?token={{ $('Input').item.json.ApifyAPIKey }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {}
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"datePosted\": \"r604800\",\n    \"experienceLevel\": [\n        \"2\",\n        \"3\"\n    ],\n    \"location\": \"Munich\",\n    \"remote\": [\n        \"1\",\n        \"2\",\n        \"3\"\n    ],\n    \"title\": \"Mathematik\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1660,
        880
      ],
      "name": "start_apify_run_linkedin1",
      "id": "acbf266b-7bae-44e4-8d37-f0ecff0a2696"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- CREATE TABLE job_listings (\n--   id TEXT PRIMARY KEY,\n--   company_name TEXT NOT NULL,\n--   job_title TEXT NOT NULL,\n--   application_url TEXT,\n--   location TEXT,\n--   description TEXT,\n--   industry TEXT,\n--   flexibility TEXT,\n--   salary_range TEXT,\n--   status TEXT,\n--   source TEXT,\n--   created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n--   processed_at TIMESTAMP WITH TIME ZONE,\n--   reason_for_match TEXT\n-- );\n\nCREATE TABLE IF NOT EXISTS job_listings (\n    id TEXT PRIMARY KEY,\n    company_name TEXT,\n    job_title TEXT,\n    application_url TEXT,\n    location TEXT,\n    description TEXT,\n    industry TEXT,\n    flexibility TEXT,\n    salary_range TEXT,\n    status TEXT DEFAULT 'new',\n    source TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    processed_at TIMESTAMP WITH TIME ZONE,\n    reason_for_match TEXT,\n    occurrence_count INTEGER NOT NULL DEFAULT 1,\n    first_scraped_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    last_scraped_at TIMESTAMP WITH TIME ZONE,\n    change_history JSONB\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        560,
        1100
      ],
      "id": "88313add-bfe7-46ac-8830-fbd18625c0f4",
      "name": "Init DB",
      "credentials": {
        "postgres": {
          "id": "KBXZvBBfjIrNeuKP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://latex:5000/compile",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"filename\": $json.fileName.split('/').pop() } }}",
        "options": {}
      },
      "id": "90a5ce0f-39d9-4e12-a513-114c6dd9b5df",
      "name": "HTTP Request: Compile PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5820,
        2260
      ],
      "alwaysOutputData": true,
      "notesInFlow": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "filePath": "={{ $json.pdf_path }}",
        "dataPropertyName": "pdfdata"
      },
      "id": "6a4b8ee0-2fd2-4336-b779-8ef6275718b1",
      "name": "Read Generated PDF",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        6040,
        2160
      ]
    },
    {
      "parameters": {
        "jsCode": "// This function now generates a plain text description without HTML.\nfunction normalizeLinkedInJob(data) {\n  const standardJob = {\n    id: null, company_name: 'Unknown Company', job_title: 'Unknown Position',\n    application_url: '', location: '', description: '', industry: 'Not specified',\n    flexibility: 'Not specified', salary_range: 'Not specified', status: 'new',\n    source: data.source || 'LinkedIn', created_at: new Date().toISOString()\n  };\n\n  // --- MAPPING LOGIC FOR LINKEDIN (unverändert) ---\n  if (data.id) standardJob.id = String(data.id);\n  if (data.postedDate) standardJob.created_at = data.postedDate;\n  if (data.companyName) standardJob.company_name = data.companyName;\n  if (data.title) standardJob.job_title = data.title;\n  if (data.applyUrl || data.url) standardJob.application_url = data.applyUrl || data.url;\n  if (data.location) standardJob.location = data.location;\n  if (data.sector) standardJob.industry = data.sector;\n  if (data.contractType) standardJob.flexibility = data.contractType;\n  if (data.salary) standardJob.salary_range = data.salary;\n\n  // --- Rule for Combined Description (PLAIN TEXT FORMAT) ---\n  const descriptionParts = [];\n  \n  // 1. Main description text (we use the plain 'description' field)\n  if (data.description) {\n    descriptionParts.push(data.description);\n  }\n  \n  // 2. Add other attributes as a plain text block\n  const details = [];\n  if (data.experienceLevel) {\n    details.push(`Experience Level: ${data.experienceLevel}`);\n  }\n  if (data.workType) {\n    details.push(`Work Type: ${data.workType}`);\n  }\n  if (data.sector) {\n    details.push(`Sector: ${data.sector}`);\n  }\n  if (data.recruiterName) {\n    details.push(`Recruiter: ${data.recruiterName}`);\n  }\n  \n  if (details.length > 0) {\n    // Add a text separator and join the details with newline characters\n    descriptionParts.push(\"\\n\\n--- Job Details ---\\n\" + details.join('\\n'));\n  }\n\n  // Join all parts into a single plain text string with double newlines\n  standardJob.description = descriptionParts.join('');\n\n  return standardJob;\n}\n\n\n// A dedicated function to parse the rich format from the Indeed scraper\nfunction normalizeIndeedJob(data) {\n    // This function remains the same as before to handle the Indeed format\n    const standardJob = {\n        id: null, company_name: 'Unknown Company', job_title: 'Unknown Position',\n        application_url: '', location: '', description: '', industry: 'Not specified',\n        flexibility: 'Not specified', salary_range: 'Not specified', status: 'new',\n        source: data.source || 'Indeed', created_at: new Date().toISOString()\n    };\n    const raw_id = data.key || data.id;\n    if (raw_id) standardJob.id = String(raw_id);\n    if (data.datePublished) standardJob.created_at = data.datePublished;\n    if (data.employer?.name) standardJob.company_name = data.employer.name;\n    if (data.title) standardJob.job_title = data.title;\n    if (data.jobUrl || data.url) standardJob.application_url = data.jobUrl || data.url;\n    const loc = data.location;\n    if (loc && typeof loc === 'object') {\n        const city = loc.city || '', postalCode = loc.postalCode || '';\n        if (postalCode && city) standardJob.location = `${postalCode} ${city}`;\n        else standardJob.location = city || postalCode;\n    } else if (typeof loc === 'string') {\n        standardJob.location = loc;\n    }\n    const salary = data.baseSalary;\n    if (salary && typeof salary === 'object') {\n        const min = salary.min, max = salary.max, currency = salary.currencyCode || '', unit = salary.unitOfWork || 'period';\n        if (min && max) standardJob.salary_range = `${currency} ${min} - ${max} per ${unit}`;\n        else if (min) standardJob.salary_range = `From ${currency} ${min} per ${unit}`;\n        else if (max) standardJob.salary_range = `Up to ${currency} ${max} per ${unit}`;\n    } else if (typeof salary === 'string') {\n        standardJob.salary_range = salary;\n    }\n    const descriptionValue = data.description;\n    if (typeof descriptionValue === 'object' && descriptionValue !== null) {\n        standardJob.description = descriptionValue.html || descriptionValue.text || '';\n    } else if (typeof descriptionValue === 'string') {\n        standardJob.description = descriptionValue;\n    }\n    return standardJob;\n}\n\n// --- Main Normalization \"Router\" Function ---\nfunction normalizeJobData(inputData) {\n  if (inputData && (inputData.employer || inputData.baseSalary)) {\n    console.log(\"Detected Indeed (rich schema) format for job ID:\", inputData.key);\n    return normalizeIndeedJob(inputData);\n  }\n  if (inputData && (inputData.companyName || inputData.postedTimeAgo)) {\n    console.log(\"Detected LinkedIn format for job ID:\", inputData.id);\n    return normalizeLinkedInJob(inputData);\n  }\n  console.log(\"Using LinkedIn format as default for job ID:\", inputData.id);\n  return normalizeLinkedInJob(inputData); // Fallback to LinkedIn parser\n}\n\n// --- Main Execution Block ---\nconst inputItems = $input.all();\nconst normalizedJobs = inputItems.map(item => {\n  const inputData = item.json || {};\n  if (!inputData.source && item.from) {\n      if (item.from.node.name.toLowerCase().includes('linkedin')) {\n          inputData.source = 'LinkedIn';\n      } else if (item.from.node.name.toLowerCase().includes('indeed')) {\n          inputData.source = 'Indeed';\n      }\n  }\n  return { json: normalizeJobData(inputData) };\n});\n\nreturn normalizedJobs;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2980,
        760
      ],
      "id": "b89c8ab5-eeb3-41a3-8bf0-e24bc0de0179",
      "name": "normalize_linkedin_job_data"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Normalizes a raw, structured job object from the Indeed scraper into our standard database format.\n */\nfunction normalizeJobData(inputData) {\n  \n  const standardJob = {\n    id: null,\n    company_name: 'Unknown Company',\n    job_title: 'Unknown Position',\n    application_url: '',\n    location: '',\n    description: '',\n    industry: 'Not specified',\n    flexibility: 'Not specified',\n    salary_range: 'Not specified',\n    status: 'new',\n    source: 'Indeed', // Source is specific to this normalizer\n    created_at: new Date().toISOString()\n  };\n\n  // --- Rule for ID ---\n  // Priorities 'key' as the primary identifier.\n  const raw_id = inputData.key || inputData.id;\n  if (raw_id) {\n    standardJob.id = String(raw_id);\n  }\n\n  // --- Rule for Company Name ---\n  // Extracts 'name' from the 'employer' object.\n  if (inputData.employer && typeof inputData.employer === 'object') {\n    standardJob.company_name = inputData.employer.name || standardJob.company_name;\n  }\n\n  // --- Rule for Location ---\n  // Combines postalCode and city if available.\n  const loc = inputData.location;\n  if (loc && typeof loc === 'object') {\n    const city = loc.city || '';\n    const postalCode = loc.postalCode || '';\n    if (postalCode && city) {\n      standardJob.location = `${postalCode} ${city}`;\n    } else {\n      standardJob.location = city || postalCode || '';\n    }\n  }\n\n  // --- Rule for Salary Range ---\n  // Formats the salary from the baseSalary object.\n  const salary = inputData.baseSalary;\n  if (salary && typeof salary === 'object') {\n    const min = salary.min;\n    const max = salary.max;\n    const currency = salary.currencyCode || '';\n    const unit = salary.unitOfWork || 'period';\n\n    if (min && max) {\n      standardJob.salary_range = `${currency} ${min} - ${max} per ${unit}`;\n    } else if (min) {\n      standardJob.salary_range = `From ${currency} ${min} per ${unit}`;\n    } else if (max) {\n      standardJob.salary_range = `Up to ${currency} ${max} per ${unit}`;\n    }\n  }\n  \n  // --- Rule for Combined Description ---\n  const descriptionParts = [];\n  // 1. Main description text\n  if (inputData.description && inputData.description.text) {\n    descriptionParts.push(inputData.description.text);\n  }\n  // 2. Employer's brief description\n  if (inputData.employer && inputData.employer.briefDescription) {\n    descriptionParts.push(`\\n\\n--- About the Company ---\\n${inputData.employer.briefDescription}`);\n  }\n  // 3. Attributes\n  if (inputData.attributes && typeof inputData.attributes === 'object') {\n    // Object.values() extracts all values from the attributes object\n    const attrs = Object.values(inputData.attributes).filter(val => val);\n    if (attrs.length > 0) {\n      descriptionParts.push(`\\n\\n--- Attributes & Requirements ---\\n- ${attrs.join('\\n- ')}`);\n    }\n  }\n  // 4. Occupations\n  if (inputData.occupations && typeof inputData.occupations === 'object') {\n    const occs = Object.values(inputData.occupations).filter(val => val);\n    if (occs.length > 0) {\n      descriptionParts.push(`\\n\\n--- Relevant Occupations ---\\n- ${occs.join('\\n- ')}`);\n    }\n  }\n  // Join all parts into a single text block\n  standardJob.description = descriptionParts.join('');\n\n\n  // --- Mapping for other fields ---\n  standardJob.job_title = inputData.title || standardJob.job_title;\n  // Prioritize the direct jobUrl over the Indeed tracking url\n  standardJob.application_url = inputData.jobUrl || inputData.url || standardJob.application_url;\n  standardJob.industry = inputData.employer?.industry || standardJob.industry;\n  standardJob.flexibility = inputData.jobTypes?.CF3CP || standardJob.flexibility;\n\n  // Use the accurate date from the scraper if available\n  if (inputData.datePublished) {\n    standardJob.created_at = inputData.datePublished;\n  }\n  \n  return standardJob;\n}\n\n// --- Main Execution Block ---\nconst inputItems = $input.all();\nconst normalizedJobs = inputItems.map(item => {\n  return { json: normalizeJobData(item.json || {}) };\n});\nreturn normalizedJobs;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2980,
        1200
      ],
      "id": "6e0c741f-722b-4f4f-92d6-cbdf806ab7d4",
      "name": "normalize_indeed_job_data"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Normalizes a raw, structured job object from the Indeed scraper into our standard database format.\n */\nfunction normalizeJobData(inputData) {\n  \n  const standardJob = {\n    id: null,\n    company_name: 'Unknown Company',\n    job_title: 'Unknown Position',\n    application_url: '',\n    location: '',\n    description: '',\n    industry: 'Not specified',\n    flexibility: 'Not specified',\n    salary_range: 'Not specified',\n    status: 'new',\n    source: 'Indeed', // Source is specific to this normalizer\n    created_at: new Date().toISOString()\n  };\n\n  // --- Rule for ID ---\n  // Priorities 'key' as the primary identifier.\n  const raw_id = inputData.key || inputData.id;\n  if (raw_id) {\n    standardJob.id = String(raw_id);\n  }\n\n  // --- Rule for Company Name ---\n  // Extracts 'name' from the 'employer' object.\n  if (inputData.employer && typeof inputData.employer === 'object') {\n    standardJob.company_name = inputData.employer.name || standardJob.company_name;\n  }\n\n  // --- Rule for Location ---\n  // Combines postalCode and city if available.\n  const loc = inputData.location;\n  if (loc && typeof loc === 'object') {\n    const city = loc.city || '';\n    const postalCode = loc.postalCode || '';\n    if (postalCode && city) {\n      standardJob.location = `${postalCode} ${city}`;\n    } else {\n      standardJob.location = city || postalCode || '';\n    }\n  }\n\n  // --- Rule for Salary Range ---\n  // Formats the salary from the baseSalary object.\n  const salary = inputData.baseSalary;\n  if (salary && typeof salary === 'object') {\n    const min = salary.min;\n    const max = salary.max;\n    const currency = salary.currencyCode || '';\n    const unit = salary.unitOfWork || 'period';\n\n    if (min && max) {\n      standardJob.salary_range = `${currency} ${min} - ${max} per ${unit}`;\n    } else if (min) {\n      standardJob.salary_range = `From ${currency} ${min} per ${unit}`;\n    } else if (max) {\n      standardJob.salary_range = `Up to ${currency} ${max} per ${unit}`;\n    }\n  }\n  \n  // --- Rule for Combined Description ---\n  const descriptionParts = [];\n  // 1. Main description text\n  if (inputData.description && inputData.description.text) {\n    descriptionParts.push(inputData.description.text);\n  }\n  // 2. Employer's brief description\n  if (inputData.employer && inputData.employer.briefDescription) {\n    descriptionParts.push(`\\n\\n--- About the Company ---\\n${inputData.employer.briefDescription}`);\n  }\n  // 3. Attributes\n  if (inputData.attributes && typeof inputData.attributes === 'object') {\n    // Object.values() extracts all values from the attributes object\n    const attrs = Object.values(inputData.attributes).filter(val => val);\n    if (attrs.length > 0) {\n      descriptionParts.push(`\\n\\n--- Attributes & Requirements ---\\n- ${attrs.join('\\n- ')}`);\n    }\n  }\n  // 4. Occupations\n  if (inputData.occupations && typeof inputData.occupations === 'object') {\n    const occs = Object.values(inputData.occupations).filter(val => val);\n    if (occs.length > 0) {\n      descriptionParts.push(`\\n\\n--- Relevant Occupations ---\\n- ${occs.join('\\n- ')}`);\n    }\n  }\n  // Join all parts into a single text block\n  standardJob.description = descriptionParts.join('');\n\n\n  // --- Mapping for other fields ---\n  standardJob.job_title = inputData.title || standardJob.job_title;\n  // Prioritize the direct jobUrl over the Indeed tracking url\n  standardJob.application_url = inputData.jobUrl || inputData.url || standardJob.application_url;\n  standardJob.industry = inputData.employer?.industry || standardJob.industry;\n  standardJob.flexibility = inputData.jobTypes?.CF3CP || standardJob.flexibility;\n\n  // Use the accurate date from the scraper if available\n  if (inputData.datePublished) {\n    standardJob.created_at = inputData.datePublished;\n  }\n  \n  return standardJob;\n}\n\n// --- Main Execution Block ---\nconst inputItems = $input.all();\nconst normalizedJobs = inputItems.map(item => {\n  return { json: normalizeJobData(item.json || {}) };\n});\nreturn normalizedJobs;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2980,
        1660
      ],
      "id": "b1505350-a194-49e7-918c-4b79a27e2f76",
      "name": "normalize_indeed_job_data1"
    },
    {
      "parameters": {
        "amount": "={{ $('Input').first().json.first_timeout }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2100,
        440
      ],
      "name": "Wait First Timeout",
      "id": "078fe887-507b-43ea-8d6f-47eea07f8264",
      "webhookId": "c5cdc3a8-b6a7-420d-8bd1-5c9d80f023e0"
    },
    {
      "parameters": {
        "amount": "={{ $('Input').first().json.first_timeout }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2100,
        880
      ],
      "name": "Wait First Timeout1",
      "id": "ed5aa1f0-9982-4656-b5ac-7e2f587af59b",
      "webhookId": "c5cdc3a8-b6a7-420d-8bd1-5c9d80f023e0"
    },
    {
      "parameters": {
        "amount": "={{ $('Input').first().json.first_timeout }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2100,
        1340
      ],
      "name": "Wait First Timeout2",
      "id": "f519cba5-d460-40a0-ae1f-e9937343824c",
      "webhookId": "2fa06f4d-0236-4a1c-8621-89c16138cd6c"
    },
    {
      "parameters": {
        "amount": "={{ $('Input').first().json.first_timeout }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2100,
        1780
      ],
      "name": "Wait First Timeout3",
      "id": "9317fc23-bff1-432b-bd47-97c952109b0b",
      "webhookId": "7edffa70-6b6d-43ae-af87-eb45dbea0da6"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Task: Write Cover Letter\n\nYour primary goal is to write a compelling cover letter based on the provided strategy.\n\n## Cover Letter Strategy Brief\n{{ JSON.stringify( $json.cover_letter_strategy ) }}\n\n---\n\n## IMPORTANT: Foundational Rules\n\nYou MUST strictly adhere to all rules outlined in your System Prompt (conciseness, authenticity, company-focus, structure, etc.). Use the Strategy Brief to guide your content and the Foundational Rules to guide your style and structure.",
        "options": {
          "systemMessage": "=# Cover Letter Assistant\n\nYou are a professional cover letter consultant who creates authentic, targeted, and personalized cover letters. Your task is to create an effective cover letter based on a job description and resume.\n\n## Cover Letter Guidelines\n\n### Core Principles\n\n1. **Company-needs focused**: Start with \"how my skills solve this company's specific problems\" rather than simply listing personal achievements\n2. **Concise and direct**: Use clear, short sentences; avoid complex structures and decorative vocabulary\n3. **Authentic personality**: Show the applicant's genuine work style and personality, avoid clichés\n4. **Targeted approach**: Address key requirements from the job description directly, not vaguely\n5. **Quality over quantity**: Prefer a few powerful examples rather than many vague accomplishments\n\n### Structure Suggestions\n\n**Opening paragraph**:\n- Briefly express why you're interested in this position\n- Mention a specific company project, value, or challenge, showing your research\n- Keep within 2-3 short sentences\n\n**Skills matching paragraphs**:\n- Focus each paragraph on one core skill or company need\n- State the company's need first, then introduce your relevant experience\n- Provide 1-2 specific examples, using data only when actually supported\n- Keep each paragraph to 3-4 short sentences\n\n**Unique value paragraph**:\n- Include a paragraph showcasing your unique advantage\n- This could be a relevant side project, special skill, or personal work approach\n- Show how this unique value benefits the company\n\n**Closing paragraph**:\n- Simply express your interest in further discussion\n- Consider mentioning your personal website or portfolio\n- Keep it brief, 2-3 sentences is enough\n\n### Language Style Guide\n\n- Use active language, avoid passive voice\n- Avoid clichés like \"I am excited to apply...\" or \"I believe I am the best candidate...\"\n- Adjust tone for company culture: technical companies use precise terminology, creative companies emphasize innovative thinking, etc.\n- Use natural, conversational language, as if talking with the hiring manager\n\n### Common Mistakes to Avoid\n\n- Overusing industry jargon and abbreviations\n- Long paragraphs and complex sentences\n- Data claims without supporting context\n- Vague achievement descriptions\n- Too much focus on \"what I did\" rather than \"what I can do for you\"\n\n## Final Check\n\nBefore finalizing, ensure the cover letter:\n- Totals 300-400 words (not exceeding one page)\n- Uses no templated expressions or business clichés\n- Addresses all key requirements from the job description\n- Has a clear focus and natural transitions in each paragraph\n- Shows the applicant's personality and work style\n- Is oriented toward solving company problems\n\nPlease create a cover letter following these guidelines, keeping it authentic, concise, and targeted.\n\nNow, wait for the user to provide the job description and master resume."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        3820,
        2600
      ],
      "id": "84a2193d-5a42-4782-be2b-329d6bb4cd9d",
      "name": "Cover Letter Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=## Job Description\n{{ $('Get Job Posting').item.json.description }}\n\n## Master CV\n{{ $('Extract Text from CV').item.json.text }}\n",
        "options": {
          "systemMessage": "=You are a world-class strategic career consultant and HR expert. Your task is to analyze a candidate's master resume and a specific job description to create a concise, actionable JSON \"strategy brief\". This brief will be the single source of truth for two separate specialist agents—a Resume Writer and a Cover Letter Writer.\n\nYour entire response MUST be a single, valid JSON object and nothing else. Adhere strictly to the defined JSON structure.\n\n### Core Strategic Principles\n\n1.  **ATS Optimization:** The primary goal is to pass automated tracking systems (ATS). The strategy must identify and map keywords from the job description to the candidate's skills and experience.\n2.  **Chronological & Relevant Ordering:** The resume's experience section must be chronological (most recent first). The projects section should be ordered by direct relevance to the target role.\n3.  **Completeness and Honesty:** All languages must be listed. When discussing education, the strategy must be honest about the candidate's academic status, framing it positively.\n4.  **Professional Tone:** All generated content and guidance must be highly professional and tailored to the company's perceived tone.\n\n### Required JSON Output Structure\n\n{\n  \"resume_strategy\": {\n    \"ats_keywords\": [\n      \"Extract a list of the 5-10 most critical keywords (nouns and technical terms) from the job description that an automated screening system would look for.\"\n    ],\n    \"summary_focus\": \"Rewrite the candidate's professional summary (2-3 sentences) to perfectly mirror the language of the job title and its top 2-3 requirements. It must integrate the most important ats_keywords naturally.\",\n    \"experience_guidance\": [\n      {\n        \"company\": \"Company Name from CV\",\n        \"title\": \"Job Title from CV\",\n        \"is_highly_relevant\": \"A boolean (true/false) indicating if this experience is critical for the target role.\",\n        \"tailoring_notes\": \"For highly relevant jobs, select the 2-3 bullet points that best demonstrate the ats_keywords. For less relevant jobs, select only the single most impactful bullet point.\"\n      }\n    ],\n    \"project_guidance\": [\n        {\n            \"name\": \"Project Name from CV\",\n            \"is_highly_relevant\": \"A boolean (true/false).\",\n            \"tailoring_notes\": \"Briefly describe how to frame this project's description and bullet points to directly address the key requirements of the job.\"\n        }\n    ],\n    \"skills_to_highlight\": [\"List the most relevant technical and soft skills from the CV that match the ats_keywords and job requirements. Include all language skills.\"],\n  },\n  \"cover_letter_strategy\": {\n    \"opening_hook\": \"A compelling opening sentence (max. 2 sentences) that connects the candidate's core strength to a specific, tangible aspect of the company or the role described.\",\n    \"core_narrative\": \"A 1-2 sentence summary of the main value proposition. This is the central theme of the letter. Example: 'My practical experience in building end-to-end ML pipelines for large-scale data directly addresses your need for robust, production-ready systems.'\",\n    \"evidence_points\": [\n      \"List 2-3 key pieces of evidence from the resume or projects that support the core_narrative. These must be the strongest proofs of the candidate's ability to solve the company's problem.\"\n    ],\n    \"company_tone\": \"Formal/Corporate OR Startup/Casual OR Academic/Technical\"\n  }\n}\n\n### Final Instructions\n- Ensure the `experience_guidance` array is ordered chronologically, with the most recent job first.\n- Ensure the `project_guidance` array is ordered by importance, with the most relevant project first.\n- The `skills_to_highlight` array must include all languages listed in the master CV."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        3220,
        2400
      ],
      "id": "c089e535-54ef-4077-b4e1-c331416e4837",
      "name": "Orchestrator Agent"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        3000,
        2400
      ],
      "id": "b5c1a8be-8fb6-4474-9d4a-4ddb8e4f6f31",
      "name": "Extract Text from CV"
    },
    {
      "parameters": {
        "jsCode": "// Get the raw string output from the Orchestrator Agent\nconst rawOutput = $input.first().json.output;\n\nif (!rawOutput || typeof rawOutput !== 'string') {\n  throw new Error(\"Input from Orchestrator Agent is not a valid string.\");\n}\n\n// --- 1. Clean the String ---\n// Remove the markdown fences and any surrounding whitespace.\nlet cleanedString = rawOutput.trim();\nif (cleanedString.startsWith(\"```json\")) {\n  cleanedString = cleanedString.substring(7).trimStart(); // Remove ```json\n}\nif (cleanedString.endsWith(\"```\")) {\n  cleanedString = cleanedString.slice(0, -3).trimEnd(); // Remove ```\n}\n\n// --- 2. Parse the Cleaned String into a JSON Object ---\ntry {\n  const parsedJson = JSON.parse(cleanedString);\n  \n  // Return the parsed object. The downstream nodes can now access\n  // its properties, e.g., parsedJson.resume_strategy\n  return parsedJson;\n\n} catch (error) {\n  console.log(\"Failed to parse the cleaned string into JSON. Raw string was:\", cleanedString);\n  throw new Error(`JSON Parsing Error: ${error.message}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3600,
        2400
      ],
      "id": "f64b747a-be6e-4dd0-aa17-b8df2bd7eab0",
      "name": "Parse Strategy JSON"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro-preview-06-05",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3220,
        2620
      ],
      "id": "a63b944f-2cf7-4534-8672-b7f32f7ca7d8",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "iK8kH8n2CiqT3aRf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import json\nfrom datetime import datetime, timezone\n\n# Get data from the two preceding nodes\nall_scraped_items = _('Scraped_Aggregated').all()[0].get('json').get('data')\nexisting_jobs_items = _('Get Existing Jobs from DB').all()\n\n# ======================= DE-DUPLICATE SCRAPED JOBS =======================\nunique_scraped_jobs = []\nseen_ids_in_scrape = set()\n\nprint(f\"Received: {len(all_scraped_items)} scraped jobs (including potential duplicates).\")\n\nfor scraped_job in all_scraped_items:\n    # Ensure the ID is always a string\n    job_id = str(scraped_job.get('id'))\n\n    # Only add the job to the list if we haven't seen this ID in this run\n    if job_id and job_id not in seen_ids_in_scrape:\n        unique_scraped_jobs.append(scraped_job)\n        # Remember the ID so we don't add it again\n        seen_ids_in_scrape.add(job_id)\n\nprint(f\"After de-duplication: {len(unique_scraped_jobs)} unique jobs will be processed.\")\n# ===================================== END OF BLOCK =====================================\n\n# Create a dictionary of existing jobs for very fast lookups.\n# The key is the job ID, the value is the complete job object from the DB.\nexisting_jobs_dict = {\n    str(item.get('json').get('id')): item.get('json', {})\n    for item in existing_jobs_items\n}\n\n# Initialize the lists for the two output branches\nnew_jobs_to_insert = []\nupdates_to_execute = []\n\ncurrent_timestamp = datetime.now(timezone.utc).isoformat()\n\n# --- THE CORE LOGIC ---\n# Loop through each unique scraped job\nfor scraped_job in unique_scraped_jobs:\n    job_id = str(scraped_job.get('id'))\n\n    if not job_id:\n        continue # Skip jobs without an ID\n\n    if job_id in existing_jobs_dict:\n        # --- CASE B: EXISTING JOB -> PREPARE DYNAMIC UPDATE ---\n        existing_job = existing_jobs_dict[job_id]\n        \n        update_fields = []\n        params = []\n        \n        # Add the fields that are always updated\n        update_fields.append(\"last_scraped_at\")\n        params.append(current_timestamp)\n        \n        update_fields.append(\"occurrence_count\")\n        params.append(existing_job.get('occurrence_count', 0) + 1)\n        \n        # --- CHANGE DETECTION: Only add fields that have changed ---\n        fields_to_check = ['job_title', 'location', 'company_name', 'description', 'application_url']\n        \n        for field in fields_to_check:\n            scraped_value = str(scraped_job.get(field, '')).strip()\n            existing_value = str(existing_job.get(field, '')).strip()\n            \n            if scraped_value != existing_value and scraped_value != '':\n                update_fields.append(field)\n                params.append(scraped_value)\n        \n        # Build the SET clause with the correct $1, $2... placeholders\n        # enumerate(..., 1) starts the counter at 1\n        set_clauses = [f'\"{field}\" = ${i}' for i, field in enumerate(update_fields, 1)]\n        \n        # Add the ID as the last parameter for the WHERE clause\n        # The placeholder number is the total number of parameters + 1\n        where_param_index = len(params) + 1\n        params.append(job_id)\n        \n        # Assemble the final, correctly formatted SQL query\n        query_string = f\"UPDATE job_listings SET {', '.join(set_clauses)} WHERE id = ${where_param_index};\"\n        \n        updates_to_execute.append({\n            'json': {\n                'query': query_string,\n                'params': params\n            }\n        })\n\n    else:\n        # --- CASE A: NEW JOB -> MARK FOR INSERTION ---\n        new_jobs_to_insert.append(scraped_job)\n\n# Return the two separated lists for the next steps in the workflow\nreturn [{\n    'json': {\n        'new_jobs_to_insert': new_jobs_to_insert,\n        'updates_to_execute': updates_to_execute,\n    }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3860,
        980
      ],
      "id": "871b257b-9d9a-476f-a076-96967dacf4f5",
      "name": "De-Duplicate"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite-preview-06-17",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        5360,
        1300
      ],
      "id": "a04739ef-82a8-4669-9d1e-fb60f48acc33",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "iK8kH8n2CiqT3aRf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# import json\n# job_info = _('Get Job Posting').first()\n# body = _('Markdown1').all()[0].get('json').get('data')\n# attachments = _('HTTP Request: Compile PDF').first().json.pdf_path\n# # error_log = _('Set Resume Result') #doenst exists when no error at http request node\n# final_output = {\n#     # 'subject': subject,\n    \n#     'body': body,\n#     'attachments': attachments\n# }\n\n# return final_output\n\nimport json\n\n# Get the job info for the email subject\njob_info = _('Get Job Posting').first().json\n\n# Get the pre-formatted HTML body for the email\nbody = _('Markdown1').first().json.get('data', '')\n\n# # --- Attachment Preparation ---\n# # Get the binary data of the PDF from the node that read the file\n# # The data is under the 'binary' property of the item\n# # pdf_binary_data = _('Read Generated PDF').first().binary.get('data')\n# pdf_binary_data = _('Extract from File')\n\n# # Get the correct PDF filename from the node where it was created\n# # pdf_filename = _('Prepare LaTeX File').first().json.get('pdf_filename', 'document.pdf')\n# pdf_filename = _('HTTP Request: Compile PDF').first().json.pdf_path\n\n# # Create the attachment object in the format n8n's Gmail node expects\n# attachments = [\n#   {\n#     \"content\": pdf_binary_data,\n#     \"fileName\": pdf_filename,\n#     \"contentType\": \"application/pdf\"\n#   }\n# ]\n\n# --- Final Output ---\n# Assemble the final object for the Gmail node\nfinal_output = {\n    'subject': f\"Your Generated Documents for {job_info.get('job_title', 'a position')} at {job_info.get('company_name', 'a company')}\",\n    'body': body,\n    # 'attachments': attachments\n}\n\n# Return the final object\nreturn final_output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6040,
        2600
      ],
      "id": "4d4c6474-cb13-4bd6-8145-a3a5e8331ba9",
      "name": "Build Email"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b166583b-103a-40f3-af5c-2f01a4112ee3",
              "name": "resume_success",
              "value": "={{ !$json.error }}",
              "type": "string"
            },
            {
              "id": "28aa53d0-58e2-404c-b964-184a7a2335f1",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6020,
        2420
      ],
      "id": "e365ece1-0c7a-45a1-b33b-05c9999ab0fa",
      "name": "Set Resume Result"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        6260,
        2400
      ],
      "id": "a210898a-a75b-4bbf-92e6-68e6b08c9a68",
      "name": "Merge1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Task: Generate Resume Content as JSON\n\nUse the provided \"Resume Strategy Brief\" to select content and populate the LaTeX template according to your system prompt rules. Adhere strictly to the provided selections.\n\n## Resume Strategy Brief\n{{ JSON.stringify($json.resume_strategy) }}\n\n## Candidate's Personalization Notes:\n{{ $('Input2').item.json.PersonalizationNotes }}\n\n\n- Please do not omit any experiences entirely and ensure they are presented in chronological order\n- loop through all experiences and projects provided in the experience_guidance and project_guidance arrays. \n- Using the is_highly_relevant flag and tailoring_notes, to decide how to format each entry\n— giving more detail and prominence to the important roles and keeping less relevant ones concise.\n- Use the `summary_focus` for the summary section.\n- For the skills section, use ONLY the skills listed in `key_skills_to_highlight`.",
        "options": {
          "systemMessage": "=You are an expert resume writer. Your task is to generate the textual content for a resume based on a provided strategy brief and a master CV.\n\n\nContext: User's Master CV\n\n{{ JSON.stringify($('Extract Text from CV').item.json.text) }}\n\nYour entire response MUST be a single, valid JSON object. \n\nThe JSON object must have the following structure:\n{ \"personal_info\": {\n    \"name\": \"Candidate Name\",\n    \"title\": \"Job Title\",\n    \"contact\": {\n      \"email\": \"email@adress.com\",\n      \"phone\": \"+12 3456 7890\",\n      \"linkedin\": \"www.linkedin.com/in/candidte-profil-123\",\n      \"location\": \"City, Country\"\n    }\n  },\n  \"summary\": \"A concise, tailored professional summary as a single plain-text string.\",\n  \"experience\": [\n    {\n      \"company\": \"Company Name\",\n      \"title\": \"Job Title\",\n      \"location\": \"Dates | City, Country\",\n      \"bullet_points\": [\n        \"A plain-text bullet point.\",\n        \"Another plain-text bullet point.\"\n      ]\n    }\n  ],\n  \"projects\": [\n    {\n      \"Project\": \"Project Name\",\n      \"bullet_points\": [\n        \"A plain-text bullet point.\",\n        \"Another plain-text bullet point.\"\n      ]\n    }\n  ],\n  \"education\": [\n    {\n      \"university\": \"University Name\",\n      \"degree\": \"Degree Name\",\n      \"location\": \"Dates | City, Country\",\n      \"details\": \"A single line of text for coursework or thesis details.\"\n    }\n  ],\n  \"skills\": [\n      {\n          \"category\": \"Skill Category Name\",\n          \"skill_list\": \"A single string of skills, separated by commas.\"\n      }\n  ]\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        4200,
        2160
      ],
      "id": "2b347908-71bb-4637-b1c8-41e20a3823b1",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsCode": "// Get the raw string output from the Orchestrator Agent\nconst rawOutput = $input.first().json.output;\n\nif (!rawOutput || typeof rawOutput !== 'string') {\n  throw new Error(\"Input from Orchestrator Agent is not a valid string.\");\n}\n\n// --- 1. Clean the String ---\n// Remove the markdown fences and any surrounding whitespace.\nlet cleanedString = rawOutput.trim();\nif (cleanedString.startsWith(\"```json\")) {\n  cleanedString = cleanedString.substring(7).trimStart(); // Remove ```json\n}\nif (cleanedString.endsWith(\"```\")) {\n  cleanedString = cleanedString.slice(0, -3).trimEnd(); // Remove ```\n}\n\n// --- 2. Parse the Cleaned String into a JSON Object ---\ntry {\n  const parsedJson = JSON.parse(cleanedString);\n  \n  // Return the parsed object. The downstream nodes can now access\n  // its properties, e.g., parsedJson.resume_strategy\n  return parsedJson;\n\n} catch (error) {\n  console.log(\"Failed to parse the cleaned string into JSON. Raw string was:\", cleanedString);\n  throw new Error(`JSON Parsing Error: ${error.message}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4580,
        2260
      ],
      "id": "4f83879f-fd99-4a44-a0a1-8774c2ae328d",
      "name": "Parse Resume JSON"
    },
    {
      "parameters": {
        "jsCode": "// This function now generates a plain text description without HTML.\nfunction normalizeLinkedInJob(data) {\n  const standardJob = {\n    id: null, company_name: 'Unknown Company', job_title: 'Unknown Position',\n    application_url: '', location: '', description: '', industry: 'Not specified',\n    flexibility: 'Not specified', salary_range: 'Not specified', status: 'new',\n    source: data.source || 'LinkedIn', created_at: new Date().toISOString()\n  };\n\n  // --- MAPPING LOGIC FOR LINKEDIN (unverändert) ---\n  if (data.id) standardJob.id = String(data.id);\n  if (data.postedDate) standardJob.created_at = data.postedDate;\n  if (data.companyName) standardJob.company_name = data.companyName;\n  if (data.title) standardJob.job_title = data.title;\n  if (data.applyUrl || data.url) standardJob.application_url = data.applyUrl || data.url;\n  if (data.location) standardJob.location = data.location;\n  if (data.sector) standardJob.industry = data.sector;\n  if (data.contractType) standardJob.flexibility = data.contractType;\n  if (data.salary) standardJob.salary_range = data.salary;\n\n  // --- Rule for Combined Description (PLAIN TEXT FORMAT) ---\n  const descriptionParts = [];\n  \n  // 1. Main description text (we use the plain 'description' field)\n  if (data.description) {\n    descriptionParts.push(data.description);\n  }\n  \n  // 2. Add other attributes as a plain text block\n  const details = [];\n  if (data.experienceLevel) {\n    details.push(`Experience Level: ${data.experienceLevel}`);\n  }\n  if (data.workType) {\n    details.push(`Work Type: ${data.workType}`);\n  }\n  if (data.sector) {\n    details.push(`Sector: ${data.sector}`);\n  }\n  if (data.recruiterName) {\n    details.push(`Recruiter: ${data.recruiterName}`);\n  }\n  \n  if (details.length > 0) {\n    // Add a text separator and join the details with newline characters\n    descriptionParts.push(\"\\n\\n--- Job Details ---\\n\" + details.join('\\n'));\n  }\n\n  // Join all parts into a single plain text string with double newlines\n  standardJob.description = descriptionParts.join('');\n\n  return standardJob;\n}\n\n\n// A dedicated function to parse the rich format from the Indeed scraper\nfunction normalizeIndeedJob(data) {\n    // This function remains the same as before to handle the Indeed format\n    const standardJob = {\n        id: null, company_name: 'Unknown Company', job_title: 'Unknown Position',\n        application_url: '', location: '', description: '', industry: 'Not specified',\n        flexibility: 'Not specified', salary_range: 'Not specified', status: 'new',\n        source: data.source || 'Indeed', created_at: new Date().toISOString()\n    };\n    const raw_id = data.key || data.id;\n    if (raw_id) standardJob.id = String(raw_id);\n    if (data.datePublished) standardJob.created_at = data.datePublished;\n    if (data.employer?.name) standardJob.company_name = data.employer.name;\n    if (data.title) standardJob.job_title = data.title;\n    if (data.jobUrl || data.url) standardJob.application_url = data.jobUrl || data.url;\n    const loc = data.location;\n    if (loc && typeof loc === 'object') {\n        const city = loc.city || '', postalCode = loc.postalCode || '';\n        if (postalCode && city) standardJob.location = `${postalCode} ${city}`;\n        else standardJob.location = city || postalCode;\n    } else if (typeof loc === 'string') {\n        standardJob.location = loc;\n    }\n    const salary = data.baseSalary;\n    if (salary && typeof salary === 'object') {\n        const min = salary.min, max = salary.max, currency = salary.currencyCode || '', unit = salary.unitOfWork || 'period';\n        if (min && max) standardJob.salary_range = `${currency} ${min} - ${max} per ${unit}`;\n        else if (min) standardJob.salary_range = `From ${currency} ${min} per ${unit}`;\n        else if (max) standardJob.salary_range = `Up to ${currency} ${max} per ${unit}`;\n    } else if (typeof salary === 'string') {\n        standardJob.salary_range = salary;\n    }\n    const descriptionValue = data.description;\n    if (typeof descriptionValue === 'object' && descriptionValue !== null) {\n        standardJob.description = descriptionValue.html || descriptionValue.text || '';\n    } else if (typeof descriptionValue === 'string') {\n        standardJob.description = descriptionValue;\n    }\n    return standardJob;\n}\n\n// --- Main Normalization \"Router\" Function ---\nfunction normalizeJobData(inputData) {\n  if (inputData && (inputData.employer || inputData.baseSalary)) {\n    console.log(\"Detected Indeed (rich schema) format for job ID:\", inputData.key);\n    return normalizeIndeedJob(inputData);\n  }\n  if (inputData && (inputData.companyName || inputData.postedTimeAgo)) {\n    console.log(\"Detected LinkedIn format for job ID:\", inputData.id);\n    return normalizeLinkedInJob(inputData);\n  }\n  console.log(\"Using LinkedIn format as default for job ID:\", inputData.id);\n  return normalizeLinkedInJob(inputData); // Fallback to LinkedIn parser\n}\n\n// --- Main Execution Block ---\nconst inputItems = $input.all();\nconst normalizedJobs = inputItems.map(item => {\n  const inputData = item.json || {};\n  if (!inputData.source && item.from) {\n      if (item.from.node.name.toLowerCase().includes('linkedin')) {\n          inputData.source = 'LinkedIn';\n      } else if (item.from.node.name.toLowerCase().includes('indeed')) {\n          inputData.source = 'Indeed';\n      }\n  }\n  return { json: normalizeJobData(inputData) };\n});\n\nreturn normalizedJobs;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2980,
        300
      ],
      "id": "a41a4074-3fef-4fd1-9bf5-820235eb5092",
      "name": "normalize_linkedin_job_data1"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/actor-runs/{{ $('Extract Run ID').item.json.runId }}/dataset/items?token={{ $('Input').item.json.ApifyAPIKey }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2760,
        300
      ],
      "name": "Get Dataset Items",
      "id": "df634589-1368-40f7-93c6-f53d3c56e618"
    },
    {
      "parameters": {
        "content": "## Automated Job Application Assistant\n\n**Author:** HAOW\n**Project Goal:** To create a self-hosted, automated system that scrapes job postings, uses a multi-agent AI to find the best matches, and generates tailored application documents on demand.\n\n**Core Workflows:**\n1.  **Scheduled Job Search (Top):** Runs daily to find, analyze, and store new job postings, sending an email with top recommendations.\n2.  **On-Demand Document Generation (Bottom):** Triggered by a webhook to create a tailored Resume and Cover Letter for a specific job.",
        "height": 720,
        "width": 620,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "b03e349f-473f-4d28-b8c2-f4740f66bcaf",
      "name": "Project Overview"
    },
    {
      "parameters": {
        "content": "### Setup Guide\n\n**1. Configure Input Variables:**\nOpen the `Workflow Inputs` node and ensure all variables are loaded correctly from your `.env` file.\n\n**2. Configure LinkedIn Search:**\n- In the `Start LinkedIn Scraper` node, customize the `jsonBody` with your desired keywords, location, etc.\n- Further information can be found in the [Apify Actor Site](https://apify.com/valig/linkedin-jobs-scraper)\n\n**3. Configure Indeed Search:**\n- In the `Start Indeed Scraper` node, customize the `jsonBody` with your desired keywords, location, etc.\n- Further information can be found in the [Apify Actor Site](https://apify.com/valig/indeed-jobs-scraper)\n\n\n**4. Upload Your master CV or Resume:**\n- Upload your master CV in PDF format to Google Drive.\n- The Master CV should contain detailed information about your experience, education, projects and skills.\n- In the `Download Master CV` node, update the `File ID` to point to your resume.",
        "height": 700,
        "width": 680,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        660,
        20
      ],
      "id": "3cabf0a2-7028-4feb-b7b9-c7478341ea17",
      "name": "Setup Guide",
      "width": 600
    },
    {
      "parameters": {
        "content": "### AI Agent: Find Best-matched jobs\n\nThis is the core matching node.\n\n**Inputs:**\n- A list of newly inserted job postings.\n- The user's full CV text.\n- The user's job preferences.\n\n**Output:**\nA structured list of the top job recommendations with a detailed `Reason for Match` for each one.",
        "height": 840,
        "width": 740
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4920,
        600
      ],
      "id": "c7cf6e2e-85b1-4234-8f80-edd2a5782c9a",
      "name": "Note"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "1RWvsyre4BnUlMiIVA2Br-pMlOdOkVYGr",
          "mode": "list",
          "cachedResultName": "Master CV July25.pdf",
          "cachedResultUrl": ""
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        800,
        1100
      ],
      "id": "05407ad6-1c9d-410a-bdf0-38c0cc9c3496",
      "name": "Download Master CV",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "CALK5gKuDX6azjm1",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "content": "### Workflow 2: On-Demand Document Generation\n\nThis entire workflow is triggered by a Webhook link from the recommendation email. It generates a tailored Resume and Cover Letter for a specific job ID.\n\n- **Get Job Posting** Fetches the specific job's details from the database.\n- **Orchestrator Agent:** The AI \"Strategist\" analyzes the job and CV to create a JSON plan.\n- **Specialist Agents:** The Resume and Cover Letter agents execute the plan.\n- **HTTP Request (Compile PDF):** Sends the final LaTeX code to the secure, self-hosted LaTeX microservice to be compiled into a PDF.",
        "height": 440,
        "width": 660,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        580,
        1860
      ],
      "typeVersion": 1,
      "id": "8c37554a-36fd-484c-9c6e-dcdcd8e2e965",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "### 1. Initialization & Configuration\n\n- **Schedule Trigger:** Starts the workflow automatically every day at a set time.\n- **Workflow Inputs:** A central `Set` node that loads key variables (API keys, email, job preferences) from the `.env` file. This makes the workflow easily configurable.\n- **Init DB:** Executes a `CREATE TABLE IF NOT EXISTS` query to ensure the `job_listings` table exists. This makes the workflow robust on its first run.",
        "height": 480,
        "width": 700
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        40,
        780
      ],
      "typeVersion": 1,
      "id": "0aa5904c-9ba8-4a4d-8c67-0c1e676d4f5d",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "### 2. Scrape & Normalize (Parallel)\n\nThese two branches run in parallel to scrape data from LinkedIn and Indeed.\n\n- **Start Scraper:** Makes a `POST` request to the Apify API to start a new scraper run.\n- **Poll & Get Data:** This block of nodes loops, checking the Apify API every 30 seconds. Once the run succeeds, it fetches the scraped job data.\n- **Normalize Data:** A crucial step. This node transforms the raw, inconsistent JSON from the scraper into a clean, standardized format for our database.",
        "height": 1980,
        "width": 1540
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1580,
        60
      ],
      "typeVersion": 1,
      "id": "ddd600cd-8a40-40d1-b534-2d601f7b8712",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "### 3. The Brain: De-duplication & Sorting\n\nThis is the core of the data processing logic.\n\n- **Merge Normalized Jobs:** Collects the clean data from all sources into a single stream.\n- **Get Existing Jobs from DB:** Takes all scraped IDs and makes **one** efficient query to the database to fetch records it already knows. The `Execute Once` setting is critical here.\n- **Code (De-Dublicate) - Sort Jobs:** This Python node compares the two lists and intelligently sorts every unique job into one of two outputs: `new_jobs_to_insert` or `existing_jobs_to_update`.",
        "height": 960,
        "width": 820
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3180,
        200
      ],
      "typeVersion": 1,
      "id": "9ef14b2d-1fc0-40c0-aa0e-172b5399e2f9",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "### 4. Database Operations & AI Matching\n\nThe workflow now splits into two branches:\n\n- **Top Path (Existing Jobs):** The `existing_jobs_to_update` list is split, and each existing job record is updated with a new `last_scraped_at` timestamp and an incremented `occurrence_count`.\n- **Bottom Path (New Jobs):** The `new_jobs_to_insert` list is split, and each new job is added to the database. These new jobs are then passed to the `AI Agent` for analysis and matching.\n",
        "height": 960,
        "width": 640
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4040,
        280
      ],
      "typeVersion": 1,
      "id": "2f10db97-9d6a-4806-922d-96c91ad126a8",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {
          "systemMessage": "You are a helpful assistant. You help to parse the output of an agent to the json of the format:\n[\n  {\n    \"database_id\": 1,\n    \"Company Name\": \"name of the company\",\n    \"Job Title\": \"Senior Software Engineer\",\n    \"Industry\": \"Technology / SaaS\",\n    \"Reason for Match\": \"Strong alignment with your 7 years of backend development experience (Java/Spring) listed in CV and your preference for mid-sized tech companies.\",\n    \"Application URL\": \"https://linkedin.com/jobs/view/1234567890\",\n    \"Location\": \"San Francisco, CA\",\n    \"Flexibility\": \"Hybrid\",\n    \"Salary Range\": \"$120,000 - $150,000\"\n  }\n]"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        5340,
        1080
      ],
      "id": "06e7d9ee-bbf5-436d-961f-a994829bb667",
      "name": "Parser"
    },
    {
      "parameters": {
        "jsCode": "// Get the raw string output from the Orchestrator Agent\nconst rawOutput = $input.first().json.output;\n\nif (!rawOutput || typeof rawOutput !== 'string') {\n  throw new Error(\"Input from Parser Agent is not a valid string.\");\n}\n\n// --- 1. Clean the String ---\n// Remove the markdown fences and any surrounding whitespace.\nlet cleanedString = rawOutput.trim();\nif (cleanedString.startsWith(\"```json\")) {\n  cleanedString = cleanedString.substring(7).trimStart(); // Remove ```json\n}\nif (cleanedString.endsWith(\"```\")) {\n  cleanedString = cleanedString.slice(0, -3).trimEnd(); // Remove ```\n}\n\n// --- 2. Parse the Cleaned String into a JSON Object ---\ntry {\n  const parsedJson = JSON.parse(cleanedString);\n  \n  // Return the parsed object. The downstream nodes can now access\n  // its properties, e.g., parsedJson.resume_strategy\n  return parsedJson;\n\n} catch (error) {\n  console.log(\"Failed to parse the cleaned string into JSON. Raw string was:\", cleanedString);\n  throw new Error(`JSON Parsing Error: ${error.message}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5720,
        1080
      ],
      "id": "4cfdc42e-89ea-493c-9d16-8f790d303ef6",
      "name": "Parse JSON"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        5940,
        1080
      ],
      "id": "d0eff441-62fa-4fd4-874c-17e1444f410f",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "87465f66-97a5-40b0-a75e-a68da164f6e8",
              "name": "data",
              "value": "={\n    \"matchedJobs\": [\n      {\n        \"database_id\": \"c4728de3c549eaf9\",\n        \"Company Name\": \"Finanztip Verbraucherinformation GmbH\",\n        \"Job Title\": \"Werkstudent*in Data Science (all genders)\",\n        \"Industry\": \"Not specified\",\n        \"Reason for Match\": \"Excellent match for a junior data science role in Munich. Directly aligns with your Data Science coursework, practical experience with Python and SQL, and native German proficiency.\",\n        \"Application URL\": \"https://t.gohiring.com/h/5b4e152b5f059415137087e72d9c3ab64b3b51551022f5530ca9a3e0d8f1c968?source=Indeed\",\n        \"Location\": \"81671 München\",\n        \"Flexibility\": \"Not specified\",\n        \"Salary Range\": \"Not specified\"\n      },\n      {\n        \"database_id\": \"55486f3995d52645\",\n        \"Company Name\": \"EFESO Management Consultants\",\n        \"Job Title\": \"Praktikant (all genders) im Bereich Künstliche Intelligenz\",\n        \"Industry\": \"Not specified\",\n        \"Reason for Match\": \"Perfectly matches your project experience in applied AI and LLMs. This internship in Munich offers hands-on experience with Python, GPT, and modern AI frameworks that you are skilled in.\",\n        \"Application URL\": \"https://t.gohiring.com/h/eaddbd0b196b5f7bbeda6928b197dbb97a2c8b94ba8a1c94fc71b4b20c8726bb?source=Indeed\",\n        \"Location\": \"80797 München\",\n        \"Flexibility\": \"Vollzeit\",\n        \"Salary Range\": \"Not specified\"\n      },\n      {\n        \"database_id\": \"c83b7b064f423054\",\n        \"Company Name\": \"Celonis\",\n        \"Job Title\": \"Associate Technology Consultant - Galaxy Program\",\n        \"Industry\": \"Not specified\",\n        \"Reason for Match\": \"This graduate program is an ideal entry point, matching your preference for a junior role in Munich. It leverages your strong background in Data Mining, Python, and SQL, and requires native German skills.\",\n        \"Application URL\": \"https://grnh.se/0304d1783us\",\n        \"Location\": \"München\",\n        \"Flexibility\": \"Vollzeit\",\n        \"Salary Range\": \"Not specified\"\n      },\n      {\n        \"database_id\": \"196d17a92a6b29b0\",\n        \"Company Name\": \"Max-Planck-Gesellschaft\",\n        \"Job Title\": \"Aushilfe mit KI/Chat GPT-Expertise in Teilzeit (6 Std./Woche) (all genders)\",\n        \"Industry\": \"Not specified\",\n        \"Reason for Match\": \"Strongly aligns with your personal projects using LLMs and prompt engineering. This role in Garching offers a great opportunity to apply your cutting-edge AI skills in a renowned research environment.\",\n        \"Application URL\": \"https://www.mpg.de/25086315/aushilfe-mit-ki-chatgpt-expertise-in-teilzeit-6std\",\n        \"Location\": \"85748 Garching bei München\",\n        \"Flexibility\": \"Not specified\",\n        \"Salary Range\": \"Not specified\"\n      },\n      {\n        \"database_id\": \"08dd74d5ca6f630f\",\n        \"Company Name\": \"Dassault Systèmes\",\n        \"Job Title\": \"Working Student (m/f/d) – AI Developer\",\n        \"Industry\": \"Not specified\",\n        \"Reason for Match\": \"This AI Developer student role is a great fit, combining your Python, AI, and software development skills. The position in Munich matches your location and preference for a hands-on technical role.\",\n        \"Application URL\": \"https://www.3ds.com/careers/jobs/working-student-m-f-d-ai-developer-544684\",\n        \"Location\": \"München\",\n        \"Flexibility\": \"Not specified\",\n        \"Salary Range\": \"Not specified\"\n      },\n      {\n        \"database_id\": \"4271013272\",\n        \"Company Name\": \"SRH University\",\n        \"Job Title\": \"Lecturer Data Science f/m/d\",\n        \"Industry\": \"Individual and Family Services\",\n        \"Reason for Match\": \"This role in Munich is a strong thematic match, seeking expertise in Data Science, Machine Learning, Python, and AI — all core strengths of your CV. It offers a unique way to apply your deep knowledge.\",\n        \"Application URL\": \"https://www.srh-karriere.de/alle-jobs/stellenangebot/lecturer-data-science-fmd-muenchen\",\n        \"Location\": \"Munich, Bavaria, Germany\",\n        \"Flexibility\": \"Full-time\",\n        \"Salary Range\": \"Not specified\"\n      },\n      {\n        \"database_id\": \"882c32539fe387c7\",\n        \"Company Name\": \"Infosys\",\n        \"Job Title\": \"MarTech Technologist - Consumer Goods, Retail and Logistics - Germany\",\n        \"Industry\": \"Not specified\",\n        \"Reason for Match\": \"This technical role in Munich leverages your advanced Python and SQL skills. While the MarTech domain is new, it aligns with your stated ability to learn new domains and apply core data skills.\",\n        \"Application URL\": \"https://apply.workable.com/j/5915B6BCE7\",\n        \"Location\": \"München\",\n        \"Flexibility\": \"Vollzeit\",\n        \"Salary Range\": \"Not specified\"\n      },\n      {\n        \"database_id\": \"4271002466\",\n        \"Company Name\": \"K-tronik GmbH\",\n        \"Job Title\": \"Java Entwickler/ Fullstack (m/w/x)\",\n        \"Industry\": \"IT Services and IT Consulting\",\n        \"Reason for Match\": \"This entry-level role near Munich fits your software development interests and experience with simulations. It utilizes your intermediate Java skills and aligns with your native German proficiency.\",\n        \"Application URL\": \"https://www.get-in-it.de/jobsuche/p290749-5dcada10/5dcada10?utm_source=linkedin&utm_medium=cpc&utm_campaign=launch-basic\",\n        \"Location\": \"Ottobrunn, Bavaria, Germany\",\n        \"Flexibility\": \"Full-time\",\n        \"Salary Range\": \"Not specified\"\n      },\n      {\n        \"database_id\": \"4271014655\",\n        \"Company Name\": \"REPA Deutschland\",\n        \"Job Title\": \"Cloud Engineer (m/f/d)\",\n        \"Industry\": \"Wholesale\",\n        \"Reason for Match\": \"While primarily a cloud role, it requires proficiency in Python scripting and is located near Munich. It offers an opportunity to leverage your software engineering skills in a cloud infrastructure environment.\",\n        \"Application URL\": \"https://de.linkedin.com/jobs/view/cloud-engineer-m-f-d-at-repa-deutschland-4271014655\",\n        \"Location\": \"Bergkirchen, Bavaria, Germany\",\n        \"Flexibility\": \"Full-time\",\n        \"Salary Range\": \"Not specified\"\n      },\n      {\n        \"database_id\": \"4268344887\",\n        \"Company Name\": \"REPA\",\n        \"Job Title\": \"Cloud Engineer (m/f/d)\",\n        \"Industry\": \"Wholesale\",\n        \"Reason for Match\": \"This position near Munich, while focused on cloud infrastructure, lists Python scripting as a required skill, which aligns with your advanced programming abilities and provides a path into a technical role.\",\n        \"Application URL\": \"https://de.linkedin.com/jobs/view/cloud-engineer-m-f-d-at-repa-4268344887\",\n        \"Location\": \"Bergkirchen, Bavaria, Germany\",\n        \"Flexibility\": \"Full-time\",\n        \"Salary Range\": \"Not specified\"\n      },\n      {\n        \"database_id\": \"4265426137\",\n        \"Company Name\": \"WAY Group\",\n        \"Job Title\": \"Development Android Application Platform (m/w/d) BMW Group Munich\",\n        \"Industry\": \"Professional Services\",\n        \"Reason for Match\": \"This role in Munich for BMW requires Python and Java, both of which are on your CV. Although it's an Android platform role, the use of your core programming languages makes it a potential fit.\",\n        \"Application URL\": \"https://join.com/companies/waygroup/14511978-development-android-application-platform-m-w-d-bmw-group-munich?pid=e65242534431eadcb0c9\",\n        \"Location\": \"Munich, Bavaria, Germany\",\n        \"Flexibility\": \"Full-time\",\n        \"Salary Range\": \"€72,000.00/yr - €77,000.00/yr\"\n      }\n    ],\n    \"updateOperations\": [\n      {\n        \"json\": {\n          \"id\": \"c4728de3c549eaf9\",\n          \"status\": \"processed\",\n          \"processed_at\": \"2025-07-21T23:50:44.615000+00:00\",\n          \"reason_for_match\": \"Excellent match for a junior data science role in Munich. Directly aligns with your Data Science coursework, practical experience with Python and SQL, and native German proficiency.\"\n        }\n      },\n      {\n        \"json\": {\n          \"id\": \"55486f3995d52645\",\n          \"status\": \"processed\",\n          \"processed_at\": \"2025-07-21T23:50:44.615000+00:00\",\n          \"reason_for_match\": \"Perfectly matches your project experience in applied AI and LLMs. This internship in Munich offers hands-on experience with Python, GPT, and modern AI frameworks that you are skilled in.\"\n        }\n      },\n      {\n        \"json\": {\n          \"id\": \"c83b7b064f423054\",\n          \"status\": \"processed\",\n          \"processed_at\": \"2025-07-21T23:50:44.615000+00:00\",\n          \"reason_for_match\": \"This graduate program is an ideal entry point, matching your preference for a junior role in Munich. It leverages your strong background in Data Mining, Python, and SQL, and requires native German skills.\"\n        }\n      },\n      {\n        \"json\": {\n          \"id\": \"196d17a92a6b29b0\",\n          \"status\": \"processed\",\n          \"processed_at\": \"2025-07-21T23:50:44.615000+00:00\",\n          \"reason_for_match\": \"Strongly aligns with your personal projects using LLMs and prompt engineering. This role in Garching offers a great opportunity to apply your cutting-edge AI skills in a renowned research environment.\"\n        }\n      },\n      {\n        \"json\": {\n          \"id\": \"08dd74d5ca6f630f\",\n          \"status\": \"processed\",\n          \"processed_at\": \"2025-07-21T23:50:44.615000+00:00\",\n          \"reason_for_match\": \"This AI Developer student role is a great fit, combining your Python, AI, and software development skills. The position in Munich matches your location and preference for a hands-on technical role.\"\n        }\n      },\n      {\n        \"json\": {\n          \"id\": \"4271013272\",\n          \"status\": \"processed\",\n          \"processed_at\": \"2025-07-21T23:50:44.615000+00:00\",\n          \"reason_for_match\": \"This role in Munich is a strong thematic match, seeking expertise in Data Science, Machine Learning, Python, and AI — all core strengths of your CV. It offers a unique way to apply your deep knowledge.\"\n        }\n      },\n      {\n        \"json\": {\n          \"id\": \"882c32539fe387c7\",\n          \"status\": \"processed\",\n          \"processed_at\": \"2025-07-21T23:50:44.615000+00:00\",\n          \"reason_for_match\": \"This technical role in Munich leverages your advanced Python and SQL skills. While the MarTech domain is new, it aligns with your stated ability to learn new domains and apply core data skills.\"\n        }\n      },\n      {\n        \"json\": {\n          \"id\": \"4271002466\",\n          \"status\": \"processed\",\n          \"processed_at\": \"2025-07-21T23:50:44.615000+00:00\",\n          \"reason_for_match\": \"This entry-level role near Munich fits your software development interests and experience with simulations. It utilizes your intermediate Java skills and aligns with your native German proficiency.\"\n        }\n      },\n      {\n        \"json\": {\n          \"id\": \"4271014655\",\n          \"status\": \"processed\",\n          \"processed_at\": \"2025-07-21T23:50:44.615000+00:00\",\n          \"reason_for_match\": \"While primarily a cloud role, it requires proficiency in Python scripting and is located near Munich. It offers an opportunity to leverage your software engineering skills in a cloud infrastructure environment.\"\n        }\n      },\n      {\n        \"json\": {\n          \"id\": \"4268344887\",\n          \"status\": \"processed\",\n          \"processed_at\": \"2025-07-21T23:50:44.615000+00:00\",\n          \"reason_for_match\": \"This position near Munich, while focused on cloud infrastructure, lists Python scripting as a required skill, which aligns with your advanced programming abilities and provides a path into a technical role.\"\n        }\n      },\n      {\n        \"json\": {\n          \"id\": \"4265426137\",\n          \"status\": \"processed\",\n          \"processed_at\": \"2025-07-21T23:50:44.615000+00:00\",\n          \"reason_for_match\": \"This role in Munich for BMW requires Python and Java, both of which are on your CV. Although it's an Android platform role, the use of your core programming languages makes it a potential fit.\"\n        }\n      }\n    ]\n  }",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4680,
        2860
      ],
      "id": "c4b08966-1b82-4cf9-add8-94cbe3bba591",
      "name": "Edit Fields"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        4460,
        2860
      ],
      "id": "632d7472-d3c8-4f71-afad-e783dd4a83e2",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "content": "### Upload your Master CV to Drive\n",
        "height": 240,
        "width": 180,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        760,
        1020
      ],
      "typeVersion": 1,
      "id": "06b18e25-244b-428c-9bba-a5daba4f63c5",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro-preview-06-05",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        4140,
        2380
      ],
      "id": "8e5d3d7f-3e68-4e95-b1a0-9bac39a98ea4",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "iK8kH8n2CiqT3aRf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        4760,
        2400
      ],
      "id": "0ca3887d-b457-40c1-ab8c-bdce936b0cb1",
      "name": "Google Gemini Chat Model4",
      "credentials": {
        "googlePalmApi": {
          "id": "iK8kH8n2CiqT3aRf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro-preview-06-05",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3780,
        2820
      ],
      "id": "0fcb85a2-8416-4826-ac42-67b751fe93cf",
      "name": "Google Gemini Chat Model5",
      "credentials": {
        "googlePalmApi": {
          "id": "iK8kH8n2CiqT3aRf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SetResumeField": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Information from Resume PDF": {
      "main": [
        [
          {
            "node": "SetResumeField",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent: Find Best-matched jobs": {
      "main": [
        [
          {
            "node": "Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent: Find Best-matched jobs",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Input": {
      "main": [
        [
          {
            "node": "Init DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "stringify_json": {
      "main": [
        [
          {
            "node": "AI Agent: Find Best-matched jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Run ID": {
      "main": [
        [
          {
            "node": "Wait First Timeout",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Run Status": {
      "main": [
        [
          {
            "node": "Check if Succeeded",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Succeeded": {
      "main": [
        [
          {
            "node": "Get Dataset Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait and Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait and Retry": {
      "main": [
        [
          {
            "node": "Check Run Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update_job_status": {
      "main": [
        [
          {
            "node": "extract_update_operation",
            "type": "main",
            "index": 0
          },
          {
            "node": "generate_html_template_py",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Run ID1": {
      "main": [
        [
          {
            "node": "Wait First Timeout2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Run Status1": {
      "main": [
        [
          {
            "node": "Check if Succeeded1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Succeeded1": {
      "main": [
        [
          {
            "node": "Get Dataset Items1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait and Retry1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Dataset Items1": {
      "main": [
        [
          {
            "node": "normalize_indeed_job_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait and Retry1": {
      "main": [
        [
          {
            "node": "Check Run Status1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Scraped_Aggregated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "start_apify_run_linkedin": {
      "main": [
        [
          {
            "node": "Extract Run ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "start_apify_run_indeed": {
      "main": [
        [
          {
            "node": "Extract Run ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract_update_operation": {
      "main": [
        [
          {
            "node": "Postgres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Run ID2": {
      "main": [
        [
          {
            "node": "Wait First Timeout3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Run Status2": {
      "main": [
        [
          {
            "node": "Check if Succeeded2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Succeeded2": {
      "main": [
        [
          {
            "node": "Get Dataset Items2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait and Retry2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Dataset Items2": {
      "main": [
        [
          {
            "node": "normalize_indeed_job_data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait and Retry2": {
      "main": [
        [
          {
            "node": "Check Run Status2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "start_apify_run_indeed1": {
      "main": [
        [
          {
            "node": "Extract Run ID2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate_html_template_py": {
      "main": [
        [
          {
            "node": "Email the top job recommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Existing Jobs from DB": {
      "main": [
        [
          {
            "node": "De-Duplicate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Insert new job postings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Update existing job postings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetDate": {
      "main": [
        [
          {
            "node": "Get Job Posting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "get_job_id1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown1": {
      "main": [
        [
          {
            "node": "parse_to_paragraphs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse_to_markdown1": {
      "main": [
        [
          {
            "node": "Markdown1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse_to_paragraphs1": {
      "main": [
        [
          {
            "node": "return_all_items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "return_all_items1": {
      "main": [
        [
          {
            "node": "Build Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set_company_name2": {
      "main": [
        [
          {
            "node": "Download Master CV1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set_cover_letter1": {
      "main": [
        [
          {
            "node": "parse_to_markdown1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input2": {
      "main": [
        [
          {
            "node": "GetDate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk7": {
      "main": [
        [
          {
            "node": "HTTP Request: Compile PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_job_id1": {
      "main": [
        [
          {
            "node": "Input2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Master CV1": {
      "main": [
        [
          {
            "node": "Extract Text from CV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File4": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "start_apify_run_linkedin",
            "type": "main",
            "index": 0
          },
          {
            "node": "start_apify_run_indeed",
            "type": "main",
            "index": 0
          },
          {
            "node": "start_apify_run_indeed1",
            "type": "main",
            "index": 0
          },
          {
            "node": "start_apify_run_linkedin1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert new job postings": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "stringify_json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scraped_Aggregated": {
      "main": [
        [
          {
            "node": "Get Existing Jobs from DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Job Posting": {
      "main": [
        [
          {
            "node": "set_company_name2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Resume Consultant": {
      "main": [
        [
          {
            "node": "Prepare Latex",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Latex": {
      "main": [
        [
          {
            "node": "Convert to File4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Run ID3": {
      "main": [
        [
          {
            "node": "Wait First Timeout1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Run Status3": {
      "main": [
        [
          {
            "node": "Check if Succeeded3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Succeeded3": {
      "main": [
        [
          {
            "node": "Get Dataset Items3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait and Retry3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Dataset Items3": {
      "main": [
        [
          {
            "node": "normalize_linkedin_job_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait and Retry3": {
      "main": [
        [
          {
            "node": "Check Run Status3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "start_apify_run_linkedin1": {
      "main": [
        [
          {
            "node": "Extract Run ID3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Init DB": {
      "main": [
        [
          {
            "node": "Download Master CV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request: Compile PDF": {
      "main": [
        [
          {
            "node": "Read Generated PDF",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Read Generated PDF": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_linkedin_job_data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "normalize_indeed_job_data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "normalize_indeed_job_data1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Wait First Timeout": {
      "main": [
        [
          {
            "node": "Check Run Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait First Timeout1": {
      "main": [
        [
          {
            "node": "Check Run Status3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait First Timeout2": {
      "main": [
        [
          {
            "node": "Check Run Status1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait First Timeout3": {
      "main": [
        [
          {
            "node": "Check Run Status2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cover Letter Agent": {
      "main": [
        [
          {
            "node": "set_cover_letter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Orchestrator Agent": {
      "main": [
        [
          {
            "node": "Parse Strategy JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text from CV": {
      "main": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Strategy JSON": {
      "main": [
        [
          {
            "node": "Cover Letter Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "De-Duplicate": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Build Email": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Parse Resume JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Resume JSON": {
      "main": [
        [
          {
            "node": "AI Resume Consultant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_linkedin_job_data1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Dataset Items": {
      "main": [
        [
          {
            "node": "normalize_linkedin_job_data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Master CV": {
      "main": [
        [
          {
            "node": "Extract Information from Resume PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parser": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "update_job_status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Resume Consultant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Cover Letter Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6589c77d6d574e5d7157ff40fd97c2b896c0cee58ce17c70dedf99cdffb91fd4"
  }
}